Rules useless in parser due to conflicts

   45 $@5: /* empty */

   74 $@12: /* empty */


State 6 conflicts: 1 reduce/reduce
State 46 conflicts: 5 reduce/reduce
State 119 conflicts: 3 shift/reduce
State 141 conflicts: 8 shift/reduce
State 142 conflicts: 8 shift/reduce
State 143 conflicts: 8 shift/reduce


Grammar

    0 $accept: program $end

    1 program: lines LINE_NO SPACE END

    2 lines: lines line
    3      | /* empty */

    4 line: LINE_NO SPACE stmt ENDL

    5 stmt: data_stmt
    6     | fun_def_stmt
    7     | dim_def_stmt
    8     | var_def_stmt
    9     | in_stmt
   10     | out_stmt
   11     | assign_stmt
   12     | iterative_stmt
   13     | control_stmt
   14     | fun_call_stmt
   15     | STOP
   16     | goto_stmt
   17     | comment_stmt
   18     | return_call_stmt
   19     | next_stmt

   20 expr: num_expr
   21     | rel_expr
   22     | log_expr
   23     | NUM_LITERAL
   24     | FLOAT_LITERAL
   25     | STR_LITERAL
   26     | var

   27 var: VAR_NAME var2
   28    | DIM_VAR

   29 var2: TYPE
   30     | /* empty */

   31 $@1: /* empty */

   32 data_stmt: $@1 DATA SPACE values

   33 values: value after_value

   34 after_value: COMMA values
   35            | /* empty */

   36 value: STR_LITERAL
   37      | NUM_LITERAL
   38      | FLOAT_LITERAL

   39 $@2: /* empty */

   40 var_def_stmt: $@2 LET SPACE assign_stmt

   41 $@3: /* empty */

   42 dim_def_stmt: $@3 DIM SPACE DIM_VAR

   43 $@4: /* empty */

   44 fun_def_stmt: $@4 DEF SPACE FUN_NAME eq_stmt num_expr

   45 $@5: /* empty */

   46 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE var CBRACE eq_stmt num_expr

   47 $@6: /* empty */

   48 in_stmt: $@6 INPUT SPACE variable_names

   49 variable_names: variable_names COMMA SPACE var
   50               | var

   51 $@7: /* empty */

   52 out_stmt: $@7 PRINT SPACE things

   53 things: thing delimiter things
   54       | thing
   55       | /* empty */

   56 delimiter: COMMA
   57          | SEMICOLON

   58 thing: var
   59      | num_expr
   60      | NUM_LITERAL
   61      | FLOAT_LITERAL
   62      | STR_LITERAL

   63 eq_stmt: space_eqs EQ_OP space_eqs

   64 space_eqs: SPACE
   65          | /* empty */

   66 $@8: /* empty */

   67 rhs: $@8 NUM_LITERAL

   68 $@9: /* empty */

   69 rhs: $@9 FLOAT_LITERAL

   70 $@10: /* empty */

   71 rhs: $@10 STR_LITERAL

   72 $@11: /* empty */

   73 rhs: $@11 num_expr

   74 $@12: /* empty */

   75 rhs: $@12 var

   76 assign_stmt: var eq_stmt rhs

   77 $@13: /* empty */

   78 fun_call_stmt: $@13 GOSUB SPACE NUM_LITERAL

   79 $@14: /* empty */

   80 return_call_stmt: $@14 RETURN

   81 $@15: /* empty */

   82 goto_stmt: $@15 GOTO SPACE NUM_LITERAL

   83 $@16: /* empty */

   84 comment_stmt: $@16 REM

   85 $@17: /* empty */

   86 control_stmt: $@17 IF SPACE rel_expr SPACE THEN SPACE NUM_LITERAL

   87 it1: SPACE STEP SPACE num_expr
   88    | /* empty */

   89 $@18: /* empty */

   90 iterative_stmt: $@18 FOR SPACE assign_stmt SPACE TO SPACE num_expr it1

   91 next_stmt: NEXT SPACE VAR_NAME

   92 num_expr: OBRACE expr CBRACE
   93         | expr num_op expr
   94         | SUB_OP expr

   95 num_op: ADD_OP
   96       | SUB_OP
   97       | MUL_OP
   98       | DIV_OP
   99       | POW_OP

  100 rel_expr: expr rel_op expr

  101 rel_op: RELATIONAL_OP
  102       | EQ_OP

  103 log_expr: expr LOGICAL_OP expr


Terminals, with rules where they appear

$end (0) 0
error (256)
LINE_NO (258) 1 4
STR_LITERAL (259) 25 36 62 71
LOGICAL_OP (260) 103
NUM_LITERAL (261) 23 37 60 67 78 82 86
FLOAT_LITERAL (262) 24 38 61 69
DIM_VAR (263) 28 42
OBRACE (264) 46 92
CBRACE (265) 46 92
VAR_NAME (266) 27 91
FUN_NAME (267) 44 46
ENDL (268) 4
RELATIONAL_OP (269) 101
PRINT (270) 52
DATA (271) 32
INPUT (272) 48
LET (273) 40
GOTO (274) 82
GOSUB (275) 78
REM (276) 84
DIM (277) 42
IF (278) 86
THEN (279) 86
FOR (280) 90
TO (281) 90
STEP (282) 87
NEXT (283) 91
RETURN (284) 80
STOP (285) 15
END (286) 1
DEF (287) 44 46
TYPE (288) 29
EQ_OP (289) 63 102
SPACE (290) 1 4 32 40 42 44 46 48 49 52 64 78 82 86 87 90 91
COMMA (291) 34 49 56
SEMICOLON (292) 57
SUB_OP (293) 94 96
ADD_OP (294) 95
DIV_OP (295) 98
MUL_OP (296) 97
POW_OP (297) 99


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 1, on right: 0
lines (45)
    on left: 2 3, on right: 1 2
line (46)
    on left: 4, on right: 2
stmt (47)
    on left: 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19, on right: 4
expr (48)
    on left: 20 21 22 23 24 25 26, on right: 92 93 94 100 103
var (49)
    on left: 27 28, on right: 26 46 49 50 58 75 76
var2 (50)
    on left: 29 30, on right: 27
data_stmt (51)
    on left: 32, on right: 5
$@1 (52)
    on left: 31, on right: 32
values (53)
    on left: 33, on right: 32 34
after_value (54)
    on left: 34 35, on right: 33
value (55)
    on left: 36 37 38, on right: 33
var_def_stmt (56)
    on left: 40, on right: 8
$@2 (57)
    on left: 39, on right: 40
dim_def_stmt (58)
    on left: 42, on right: 7
$@3 (59)
    on left: 41, on right: 42
fun_def_stmt (60)
    on left: 44 46, on right: 6
$@4 (61)
    on left: 43, on right: 44
$@5 (62)
    on left: 45, on right: 46
in_stmt (63)
    on left: 48, on right: 9
$@6 (64)
    on left: 47, on right: 48
variable_names (65)
    on left: 49 50, on right: 48 49
out_stmt (66)
    on left: 52, on right: 10
$@7 (67)
    on left: 51, on right: 52
things (68)
    on left: 53 54 55, on right: 52 53
delimiter (69)
    on left: 56 57, on right: 53
thing (70)
    on left: 58 59 60 61 62, on right: 53 54
eq_stmt (71)
    on left: 63, on right: 44 46 76
space_eqs (72)
    on left: 64 65, on right: 63
rhs (73)
    on left: 67 69 71 73 75, on right: 76
$@8 (74)
    on left: 66, on right: 67
$@9 (75)
    on left: 68, on right: 69
$@10 (76)
    on left: 70, on right: 71
$@11 (77)
    on left: 72, on right: 73
$@12 (78)
    on left: 74, on right: 75
assign_stmt (79)
    on left: 76, on right: 11 40 90
fun_call_stmt (80)
    on left: 78, on right: 14
$@13 (81)
    on left: 77, on right: 78
return_call_stmt (82)
    on left: 80, on right: 18
$@14 (83)
    on left: 79, on right: 80
goto_stmt (84)
    on left: 82, on right: 16
$@15 (85)
    on left: 81, on right: 82
comment_stmt (86)
    on left: 84, on right: 17
$@16 (87)
    on left: 83, on right: 84
control_stmt (88)
    on left: 86, on right: 13
$@17 (89)
    on left: 85, on right: 86
it1 (90)
    on left: 87 88, on right: 90
iterative_stmt (91)
    on left: 90, on right: 12
$@18 (92)
    on left: 89, on right: 90
next_stmt (93)
    on left: 91, on right: 19
num_expr (94)
    on left: 92 93 94, on right: 20 44 46 59 73 87 90
num_op (95)
    on left: 95 96 97 98 99, on right: 93
rel_expr (96)
    on left: 100, on right: 21 86
rel_op (97)
    on left: 101 102, on right: 100
log_expr (98)
    on left: 103, on right: 22


state 0

    0 $accept: . program $end

    $default  reduce using rule 3 (lines)

    program  go to state 1
    lines    go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: lines . LINE_NO SPACE END
    2 lines: lines . line

    LINE_NO  shift, and go to state 4

    line  go to state 5


state 3

    0 $accept: program $end .

    $default  accept


state 4

    1 program: lines LINE_NO . SPACE END
    4 line: LINE_NO . SPACE stmt ENDL

    SPACE  shift, and go to state 6


state 5

    2 lines: lines line .

    $default  reduce using rule 2 (lines)


state 6

    1 program: lines LINE_NO SPACE . END
    4 line: LINE_NO SPACE . stmt ENDL

    DIM_VAR   shift, and go to state 7
    VAR_NAME  shift, and go to state 8
    NEXT      shift, and go to state 9
    STOP      shift, and go to state 10
    END       shift, and go to state 11

    PRINT     reduce using rule 51 ($@7)
    INPUT     reduce using rule 47 ($@6)
    LET       reduce using rule 39 ($@2)
    GOTO      reduce using rule 81 ($@15)
    GOSUB     reduce using rule 77 ($@13)
    REM       reduce using rule 83 ($@16)
    DIM       reduce using rule 41 ($@3)
    IF        reduce using rule 85 ($@17)
    FOR       reduce using rule 89 ($@18)
    RETURN    reduce using rule 79 ($@14)
    DEF       reduce using rule 43 ($@4)
    DEF       [reduce using rule 45 ($@5)]
    $default  reduce using rule 31 ($@1)

    stmt              go to state 12
    var               go to state 13
    data_stmt         go to state 14
    $@1               go to state 15
    var_def_stmt      go to state 16
    $@2               go to state 17
    dim_def_stmt      go to state 18
    $@3               go to state 19
    fun_def_stmt      go to state 20
    $@4               go to state 21
    $@5               go to state 22
    in_stmt           go to state 23
    $@6               go to state 24
    out_stmt          go to state 25
    $@7               go to state 26
    assign_stmt       go to state 27
    fun_call_stmt     go to state 28
    $@13              go to state 29
    return_call_stmt  go to state 30
    $@14              go to state 31
    goto_stmt         go to state 32
    $@15              go to state 33
    comment_stmt      go to state 34
    $@16              go to state 35
    control_stmt      go to state 36
    $@17              go to state 37
    iterative_stmt    go to state 38
    $@18              go to state 39
    next_stmt         go to state 40


state 7

   28 var: DIM_VAR .

    $default  reduce using rule 28 (var)


state 8

   27 var: VAR_NAME . var2

    TYPE  shift, and go to state 41

    $default  reduce using rule 30 (var2)

    var2  go to state 42


state 9

   91 next_stmt: NEXT . SPACE VAR_NAME

    SPACE  shift, and go to state 43


state 10

   15 stmt: STOP .

    $default  reduce using rule 15 (stmt)


state 11

    1 program: lines LINE_NO SPACE END .

    $default  reduce using rule 1 (program)


state 12

    4 line: LINE_NO SPACE stmt . ENDL

    ENDL  shift, and go to state 44


state 13

   76 assign_stmt: var . eq_stmt rhs

    SPACE  shift, and go to state 45

    $default  reduce using rule 65 (space_eqs)

    eq_stmt    go to state 46
    space_eqs  go to state 47


state 14

    5 stmt: data_stmt .

    $default  reduce using rule 5 (stmt)


state 15

   32 data_stmt: $@1 . DATA SPACE values

    DATA  shift, and go to state 48


state 16

    8 stmt: var_def_stmt .

    $default  reduce using rule 8 (stmt)


state 17

   40 var_def_stmt: $@2 . LET SPACE assign_stmt

    LET  shift, and go to state 49


state 18

    7 stmt: dim_def_stmt .

    $default  reduce using rule 7 (stmt)


state 19

   42 dim_def_stmt: $@3 . DIM SPACE DIM_VAR

    DIM  shift, and go to state 50


state 20

    6 stmt: fun_def_stmt .

    $default  reduce using rule 6 (stmt)


state 21

   44 fun_def_stmt: $@4 . DEF SPACE FUN_NAME eq_stmt num_expr

    DEF  shift, and go to state 51


state 22

   46 fun_def_stmt: $@5 . DEF SPACE FUN_NAME OBRACE var CBRACE eq_stmt num_expr

    DEF  shift, and go to state 52


state 23

    9 stmt: in_stmt .

    $default  reduce using rule 9 (stmt)


state 24

   48 in_stmt: $@6 . INPUT SPACE variable_names

    INPUT  shift, and go to state 53


state 25

   10 stmt: out_stmt .

    $default  reduce using rule 10 (stmt)


state 26

   52 out_stmt: $@7 . PRINT SPACE things

    PRINT  shift, and go to state 54


state 27

   11 stmt: assign_stmt .

    $default  reduce using rule 11 (stmt)


state 28

   14 stmt: fun_call_stmt .

    $default  reduce using rule 14 (stmt)


state 29

   78 fun_call_stmt: $@13 . GOSUB SPACE NUM_LITERAL

    GOSUB  shift, and go to state 55


state 30

   18 stmt: return_call_stmt .

    $default  reduce using rule 18 (stmt)


state 31

   80 return_call_stmt: $@14 . RETURN

    RETURN  shift, and go to state 56


state 32

   16 stmt: goto_stmt .

    $default  reduce using rule 16 (stmt)


state 33

   82 goto_stmt: $@15 . GOTO SPACE NUM_LITERAL

    GOTO  shift, and go to state 57


state 34

   17 stmt: comment_stmt .

    $default  reduce using rule 17 (stmt)


state 35

   84 comment_stmt: $@16 . REM

    REM  shift, and go to state 58


state 36

   13 stmt: control_stmt .

    $default  reduce using rule 13 (stmt)


state 37

   86 control_stmt: $@17 . IF SPACE rel_expr SPACE THEN SPACE NUM_LITERAL

    IF  shift, and go to state 59


state 38

   12 stmt: iterative_stmt .

    $default  reduce using rule 12 (stmt)


state 39

   90 iterative_stmt: $@18 . FOR SPACE assign_stmt SPACE TO SPACE num_expr it1

    FOR  shift, and go to state 60


state 40

   19 stmt: next_stmt .

    $default  reduce using rule 19 (stmt)


state 41

   29 var2: TYPE .

    $default  reduce using rule 29 (var2)


state 42

   27 var: VAR_NAME var2 .

    $default  reduce using rule 27 (var)


state 43

   91 next_stmt: NEXT SPACE . VAR_NAME

    VAR_NAME  shift, and go to state 61


state 44

    4 line: LINE_NO SPACE stmt ENDL .

    $default  reduce using rule 4 (line)


state 45

   64 space_eqs: SPACE .

    $default  reduce using rule 64 (space_eqs)


state 46

   76 assign_stmt: var eq_stmt . rhs

    STR_LITERAL    reduce using rule 70 ($@10)
    STR_LITERAL    [reduce using rule 72 ($@11)]
    NUM_LITERAL    reduce using rule 66 ($@8)
    NUM_LITERAL    [reduce using rule 72 ($@11)]
    FLOAT_LITERAL  reduce using rule 68 ($@9)
    FLOAT_LITERAL  [reduce using rule 72 ($@11)]
    DIM_VAR        reduce using rule 72 ($@11)
    DIM_VAR        [reduce using rule 74 ($@12)]
    VAR_NAME       reduce using rule 72 ($@11)
    VAR_NAME       [reduce using rule 74 ($@12)]
    $default       reduce using rule 72 ($@11)

    rhs   go to state 62
    $@8   go to state 63
    $@9   go to state 64
    $@10  go to state 65
    $@11  go to state 66
    $@12  go to state 67


state 47

   63 eq_stmt: space_eqs . EQ_OP space_eqs

    EQ_OP  shift, and go to state 68


state 48

   32 data_stmt: $@1 DATA . SPACE values

    SPACE  shift, and go to state 69


state 49

   40 var_def_stmt: $@2 LET . SPACE assign_stmt

    SPACE  shift, and go to state 70


state 50

   42 dim_def_stmt: $@3 DIM . SPACE DIM_VAR

    SPACE  shift, and go to state 71


state 51

   44 fun_def_stmt: $@4 DEF . SPACE FUN_NAME eq_stmt num_expr

    SPACE  shift, and go to state 72


state 52

   46 fun_def_stmt: $@5 DEF . SPACE FUN_NAME OBRACE var CBRACE eq_stmt num_expr

    SPACE  shift, and go to state 73


state 53

   48 in_stmt: $@6 INPUT . SPACE variable_names

    SPACE  shift, and go to state 74


state 54

   52 out_stmt: $@7 PRINT . SPACE things

    SPACE  shift, and go to state 75


state 55

   78 fun_call_stmt: $@13 GOSUB . SPACE NUM_LITERAL

    SPACE  shift, and go to state 76


state 56

   80 return_call_stmt: $@14 RETURN .

    $default  reduce using rule 80 (return_call_stmt)


state 57

   82 goto_stmt: $@15 GOTO . SPACE NUM_LITERAL

    SPACE  shift, and go to state 77


state 58

   84 comment_stmt: $@16 REM .

    $default  reduce using rule 84 (comment_stmt)


state 59

   86 control_stmt: $@17 IF . SPACE rel_expr SPACE THEN SPACE NUM_LITERAL

    SPACE  shift, and go to state 78


state 60

   90 iterative_stmt: $@18 FOR . SPACE assign_stmt SPACE TO SPACE num_expr it1

    SPACE  shift, and go to state 79


state 61

   91 next_stmt: NEXT SPACE VAR_NAME .

    $default  reduce using rule 91 (next_stmt)


state 62

   76 assign_stmt: var eq_stmt rhs .

    $default  reduce using rule 76 (assign_stmt)


state 63

   67 rhs: $@8 . NUM_LITERAL

    NUM_LITERAL  shift, and go to state 80


state 64

   69 rhs: $@9 . FLOAT_LITERAL

    FLOAT_LITERAL  shift, and go to state 81


state 65

   71 rhs: $@10 . STR_LITERAL

    STR_LITERAL  shift, and go to state 82


state 66

   73 rhs: $@11 . num_expr

    STR_LITERAL    shift, and go to state 83
    NUM_LITERAL    shift, and go to state 84
    FLOAT_LITERAL  shift, and go to state 85
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    expr      go to state 88
    var       go to state 89
    num_expr  go to state 90
    rel_expr  go to state 91
    log_expr  go to state 92


state 67

   75 rhs: $@12 . var

    DIM_VAR   shift, and go to state 7
    VAR_NAME  shift, and go to state 8

    var  go to state 93


state 68

   63 eq_stmt: space_eqs EQ_OP . space_eqs

    SPACE  shift, and go to state 45

    $default  reduce using rule 65 (space_eqs)

    space_eqs  go to state 94


state 69

   32 data_stmt: $@1 DATA SPACE . values

    STR_LITERAL    shift, and go to state 95
    NUM_LITERAL    shift, and go to state 96
    FLOAT_LITERAL  shift, and go to state 97

    values  go to state 98
    value   go to state 99


state 70

   40 var_def_stmt: $@2 LET SPACE . assign_stmt

    DIM_VAR   shift, and go to state 7
    VAR_NAME  shift, and go to state 8

    var          go to state 13
    assign_stmt  go to state 100


state 71

   42 dim_def_stmt: $@3 DIM SPACE . DIM_VAR

    DIM_VAR  shift, and go to state 101


state 72

   44 fun_def_stmt: $@4 DEF SPACE . FUN_NAME eq_stmt num_expr

    FUN_NAME  shift, and go to state 102


state 73

   46 fun_def_stmt: $@5 DEF SPACE . FUN_NAME OBRACE var CBRACE eq_stmt num_expr

    FUN_NAME  shift, and go to state 103


state 74

   48 in_stmt: $@6 INPUT SPACE . variable_names

    DIM_VAR   shift, and go to state 7
    VAR_NAME  shift, and go to state 8

    var             go to state 104
    variable_names  go to state 105


state 75

   52 out_stmt: $@7 PRINT SPACE . things

    STR_LITERAL    shift, and go to state 106
    NUM_LITERAL    shift, and go to state 107
    FLOAT_LITERAL  shift, and go to state 108
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    $default  reduce using rule 55 (things)

    expr      go to state 88
    var       go to state 109
    things    go to state 110
    thing     go to state 111
    num_expr  go to state 112
    rel_expr  go to state 91
    log_expr  go to state 92


state 76

   78 fun_call_stmt: $@13 GOSUB SPACE . NUM_LITERAL

    NUM_LITERAL  shift, and go to state 113


state 77

   82 goto_stmt: $@15 GOTO SPACE . NUM_LITERAL

    NUM_LITERAL  shift, and go to state 114


state 78

   86 control_stmt: $@17 IF SPACE . rel_expr SPACE THEN SPACE NUM_LITERAL

    STR_LITERAL    shift, and go to state 83
    NUM_LITERAL    shift, and go to state 84
    FLOAT_LITERAL  shift, and go to state 85
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    expr      go to state 88
    var       go to state 89
    num_expr  go to state 115
    rel_expr  go to state 116
    log_expr  go to state 92


state 79

   90 iterative_stmt: $@18 FOR SPACE . assign_stmt SPACE TO SPACE num_expr it1

    DIM_VAR   shift, and go to state 7
    VAR_NAME  shift, and go to state 8

    var          go to state 13
    assign_stmt  go to state 117


state 80

   67 rhs: $@8 NUM_LITERAL .

    $default  reduce using rule 67 (rhs)


state 81

   69 rhs: $@9 FLOAT_LITERAL .

    $default  reduce using rule 69 (rhs)


state 82

   71 rhs: $@10 STR_LITERAL .

    $default  reduce using rule 71 (rhs)


state 83

   25 expr: STR_LITERAL .

    $default  reduce using rule 25 (expr)


state 84

   23 expr: NUM_LITERAL .

    $default  reduce using rule 23 (expr)


state 85

   24 expr: FLOAT_LITERAL .

    $default  reduce using rule 24 (expr)


state 86

   92 num_expr: OBRACE . expr CBRACE

    STR_LITERAL    shift, and go to state 83
    NUM_LITERAL    shift, and go to state 84
    FLOAT_LITERAL  shift, and go to state 85
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    expr      go to state 118
    var       go to state 89
    num_expr  go to state 115
    rel_expr  go to state 91
    log_expr  go to state 92


state 87

   94 num_expr: SUB_OP . expr

    STR_LITERAL    shift, and go to state 83
    NUM_LITERAL    shift, and go to state 84
    FLOAT_LITERAL  shift, and go to state 85
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    expr      go to state 119
    var       go to state 89
    num_expr  go to state 115
    rel_expr  go to state 91
    log_expr  go to state 92


state 88

   93 num_expr: expr . num_op expr
  100 rel_expr: expr . rel_op expr
  103 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 120
    RELATIONAL_OP  shift, and go to state 121
    EQ_OP          shift, and go to state 122
    SUB_OP         shift, and go to state 123
    ADD_OP         shift, and go to state 124
    DIV_OP         shift, and go to state 125
    MUL_OP         shift, and go to state 126
    POW_OP         shift, and go to state 127

    num_op  go to state 128
    rel_op  go to state 129


state 89

   26 expr: var .

    $default  reduce using rule 26 (expr)


state 90

   20 expr: num_expr .
   73 rhs: $@11 num_expr .

    ENDL      reduce using rule 73 (rhs)
    SPACE     reduce using rule 73 (rhs)
    $default  reduce using rule 20 (expr)


state 91

   21 expr: rel_expr .

    $default  reduce using rule 21 (expr)


state 92

   22 expr: log_expr .

    $default  reduce using rule 22 (expr)


state 93

   75 rhs: $@12 var .

    $default  reduce using rule 75 (rhs)


state 94

   63 eq_stmt: space_eqs EQ_OP space_eqs .

    $default  reduce using rule 63 (eq_stmt)


state 95

   36 value: STR_LITERAL .

    $default  reduce using rule 36 (value)


state 96

   37 value: NUM_LITERAL .

    $default  reduce using rule 37 (value)


state 97

   38 value: FLOAT_LITERAL .

    $default  reduce using rule 38 (value)


state 98

   32 data_stmt: $@1 DATA SPACE values .

    $default  reduce using rule 32 (data_stmt)


state 99

   33 values: value . after_value

    COMMA  shift, and go to state 130

    $default  reduce using rule 35 (after_value)

    after_value  go to state 131


state 100

   40 var_def_stmt: $@2 LET SPACE assign_stmt .

    $default  reduce using rule 40 (var_def_stmt)


state 101

   42 dim_def_stmt: $@3 DIM SPACE DIM_VAR .

    $default  reduce using rule 42 (dim_def_stmt)


state 102

   44 fun_def_stmt: $@4 DEF SPACE FUN_NAME . eq_stmt num_expr

    SPACE  shift, and go to state 45

    $default  reduce using rule 65 (space_eqs)

    eq_stmt    go to state 132
    space_eqs  go to state 47


state 103

   46 fun_def_stmt: $@5 DEF SPACE FUN_NAME . OBRACE var CBRACE eq_stmt num_expr

    OBRACE  shift, and go to state 133


state 104

   50 variable_names: var .

    $default  reduce using rule 50 (variable_names)


state 105

   48 in_stmt: $@6 INPUT SPACE variable_names .
   49 variable_names: variable_names . COMMA SPACE var

    COMMA  shift, and go to state 134

    $default  reduce using rule 48 (in_stmt)


state 106

   25 expr: STR_LITERAL .
   62 thing: STR_LITERAL .

    ENDL       reduce using rule 62 (thing)
    COMMA      reduce using rule 62 (thing)
    SEMICOLON  reduce using rule 62 (thing)
    $default   reduce using rule 25 (expr)


state 107

   23 expr: NUM_LITERAL .
   60 thing: NUM_LITERAL .

    ENDL       reduce using rule 60 (thing)
    COMMA      reduce using rule 60 (thing)
    SEMICOLON  reduce using rule 60 (thing)
    $default   reduce using rule 23 (expr)


state 108

   24 expr: FLOAT_LITERAL .
   61 thing: FLOAT_LITERAL .

    ENDL       reduce using rule 61 (thing)
    COMMA      reduce using rule 61 (thing)
    SEMICOLON  reduce using rule 61 (thing)
    $default   reduce using rule 24 (expr)


state 109

   26 expr: var .
   58 thing: var .

    ENDL       reduce using rule 58 (thing)
    COMMA      reduce using rule 58 (thing)
    SEMICOLON  reduce using rule 58 (thing)
    $default   reduce using rule 26 (expr)


state 110

   52 out_stmt: $@7 PRINT SPACE things .

    $default  reduce using rule 52 (out_stmt)


state 111

   53 things: thing . delimiter things
   54       | thing .

    COMMA      shift, and go to state 135
    SEMICOLON  shift, and go to state 136

    $default  reduce using rule 54 (things)

    delimiter  go to state 137


state 112

   20 expr: num_expr .
   59 thing: num_expr .

    ENDL       reduce using rule 59 (thing)
    COMMA      reduce using rule 59 (thing)
    SEMICOLON  reduce using rule 59 (thing)
    $default   reduce using rule 20 (expr)


state 113

   78 fun_call_stmt: $@13 GOSUB SPACE NUM_LITERAL .

    $default  reduce using rule 78 (fun_call_stmt)


state 114

   82 goto_stmt: $@15 GOTO SPACE NUM_LITERAL .

    $default  reduce using rule 82 (goto_stmt)


state 115

   20 expr: num_expr .

    $default  reduce using rule 20 (expr)


state 116

   21 expr: rel_expr .
   86 control_stmt: $@17 IF SPACE rel_expr . SPACE THEN SPACE NUM_LITERAL

    SPACE  shift, and go to state 138

    $default  reduce using rule 21 (expr)


state 117

   90 iterative_stmt: $@18 FOR SPACE assign_stmt . SPACE TO SPACE num_expr it1

    SPACE  shift, and go to state 139


state 118

   92 num_expr: OBRACE expr . CBRACE
   93         | expr . num_op expr
  100 rel_expr: expr . rel_op expr
  103 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 120
    CBRACE         shift, and go to state 140
    RELATIONAL_OP  shift, and go to state 121
    EQ_OP          shift, and go to state 122
    SUB_OP         shift, and go to state 123
    ADD_OP         shift, and go to state 124
    DIV_OP         shift, and go to state 125
    MUL_OP         shift, and go to state 126
    POW_OP         shift, and go to state 127

    num_op  go to state 128
    rel_op  go to state 129


state 119

   93 num_expr: expr . num_op expr
   94         | SUB_OP expr .
  100 rel_expr: expr . rel_op expr
  103 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 120
    RELATIONAL_OP  shift, and go to state 121
    EQ_OP          shift, and go to state 122
    DIV_OP         shift, and go to state 125
    MUL_OP         shift, and go to state 126
    POW_OP         shift, and go to state 127

    LOGICAL_OP     [reduce using rule 94 (num_expr)]
    RELATIONAL_OP  [reduce using rule 94 (num_expr)]
    EQ_OP          [reduce using rule 94 (num_expr)]
    $default       reduce using rule 94 (num_expr)

    num_op  go to state 128
    rel_op  go to state 129


state 120

  103 log_expr: expr LOGICAL_OP . expr

    STR_LITERAL    shift, and go to state 83
    NUM_LITERAL    shift, and go to state 84
    FLOAT_LITERAL  shift, and go to state 85
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    expr      go to state 141
    var       go to state 89
    num_expr  go to state 115
    rel_expr  go to state 91
    log_expr  go to state 92


state 121

  101 rel_op: RELATIONAL_OP .

    $default  reduce using rule 101 (rel_op)


state 122

  102 rel_op: EQ_OP .

    $default  reduce using rule 102 (rel_op)


state 123

   96 num_op: SUB_OP .

    $default  reduce using rule 96 (num_op)


state 124

   95 num_op: ADD_OP .

    $default  reduce using rule 95 (num_op)


state 125

   98 num_op: DIV_OP .

    $default  reduce using rule 98 (num_op)


state 126

   97 num_op: MUL_OP .

    $default  reduce using rule 97 (num_op)


state 127

   99 num_op: POW_OP .

    $default  reduce using rule 99 (num_op)


state 128

   93 num_expr: expr num_op . expr

    STR_LITERAL    shift, and go to state 83
    NUM_LITERAL    shift, and go to state 84
    FLOAT_LITERAL  shift, and go to state 85
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    expr      go to state 142
    var       go to state 89
    num_expr  go to state 115
    rel_expr  go to state 91
    log_expr  go to state 92


state 129

  100 rel_expr: expr rel_op . expr

    STR_LITERAL    shift, and go to state 83
    NUM_LITERAL    shift, and go to state 84
    FLOAT_LITERAL  shift, and go to state 85
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    expr      go to state 143
    var       go to state 89
    num_expr  go to state 115
    rel_expr  go to state 91
    log_expr  go to state 92


state 130

   34 after_value: COMMA . values

    STR_LITERAL    shift, and go to state 95
    NUM_LITERAL    shift, and go to state 96
    FLOAT_LITERAL  shift, and go to state 97

    values  go to state 144
    value   go to state 99


state 131

   33 values: value after_value .

    $default  reduce using rule 33 (values)


state 132

   44 fun_def_stmt: $@4 DEF SPACE FUN_NAME eq_stmt . num_expr

    STR_LITERAL    shift, and go to state 83
    NUM_LITERAL    shift, and go to state 84
    FLOAT_LITERAL  shift, and go to state 85
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    expr      go to state 88
    var       go to state 89
    num_expr  go to state 145
    rel_expr  go to state 91
    log_expr  go to state 92


state 133

   46 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE . var CBRACE eq_stmt num_expr

    DIM_VAR   shift, and go to state 7
    VAR_NAME  shift, and go to state 8

    var  go to state 146


state 134

   49 variable_names: variable_names COMMA . SPACE var

    SPACE  shift, and go to state 147


state 135

   56 delimiter: COMMA .

    $default  reduce using rule 56 (delimiter)


state 136

   57 delimiter: SEMICOLON .

    $default  reduce using rule 57 (delimiter)


state 137

   53 things: thing delimiter . things

    STR_LITERAL    shift, and go to state 106
    NUM_LITERAL    shift, and go to state 107
    FLOAT_LITERAL  shift, and go to state 108
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    $default  reduce using rule 55 (things)

    expr      go to state 88
    var       go to state 109
    things    go to state 148
    thing     go to state 111
    num_expr  go to state 112
    rel_expr  go to state 91
    log_expr  go to state 92


state 138

   86 control_stmt: $@17 IF SPACE rel_expr SPACE . THEN SPACE NUM_LITERAL

    THEN  shift, and go to state 149


state 139

   90 iterative_stmt: $@18 FOR SPACE assign_stmt SPACE . TO SPACE num_expr it1

    TO  shift, and go to state 150


state 140

   92 num_expr: OBRACE expr CBRACE .

    $default  reduce using rule 92 (num_expr)


state 141

   93 num_expr: expr . num_op expr
  100 rel_expr: expr . rel_op expr
  103 log_expr: expr . LOGICAL_OP expr
  103         | expr LOGICAL_OP expr .

    LOGICAL_OP     shift, and go to state 120
    RELATIONAL_OP  shift, and go to state 121
    EQ_OP          shift, and go to state 122
    SUB_OP         shift, and go to state 123
    ADD_OP         shift, and go to state 124
    DIV_OP         shift, and go to state 125
    MUL_OP         shift, and go to state 126
    POW_OP         shift, and go to state 127

    LOGICAL_OP     [reduce using rule 103 (log_expr)]
    RELATIONAL_OP  [reduce using rule 103 (log_expr)]
    EQ_OP          [reduce using rule 103 (log_expr)]
    SUB_OP         [reduce using rule 103 (log_expr)]
    ADD_OP         [reduce using rule 103 (log_expr)]
    DIV_OP         [reduce using rule 103 (log_expr)]
    MUL_OP         [reduce using rule 103 (log_expr)]
    POW_OP         [reduce using rule 103 (log_expr)]
    $default       reduce using rule 103 (log_expr)

    num_op  go to state 128
    rel_op  go to state 129


state 142

   93 num_expr: expr . num_op expr
   93         | expr num_op expr .
  100 rel_expr: expr . rel_op expr
  103 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 120
    RELATIONAL_OP  shift, and go to state 121
    EQ_OP          shift, and go to state 122
    SUB_OP         shift, and go to state 123
    ADD_OP         shift, and go to state 124
    DIV_OP         shift, and go to state 125
    MUL_OP         shift, and go to state 126
    POW_OP         shift, and go to state 127

    LOGICAL_OP     [reduce using rule 93 (num_expr)]
    RELATIONAL_OP  [reduce using rule 93 (num_expr)]
    EQ_OP          [reduce using rule 93 (num_expr)]
    SUB_OP         [reduce using rule 93 (num_expr)]
    ADD_OP         [reduce using rule 93 (num_expr)]
    DIV_OP         [reduce using rule 93 (num_expr)]
    MUL_OP         [reduce using rule 93 (num_expr)]
    POW_OP         [reduce using rule 93 (num_expr)]
    $default       reduce using rule 93 (num_expr)

    num_op  go to state 128
    rel_op  go to state 129


state 143

   93 num_expr: expr . num_op expr
  100 rel_expr: expr . rel_op expr
  100         | expr rel_op expr .
  103 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 120
    RELATIONAL_OP  shift, and go to state 121
    EQ_OP          shift, and go to state 122
    SUB_OP         shift, and go to state 123
    ADD_OP         shift, and go to state 124
    DIV_OP         shift, and go to state 125
    MUL_OP         shift, and go to state 126
    POW_OP         shift, and go to state 127

    LOGICAL_OP     [reduce using rule 100 (rel_expr)]
    RELATIONAL_OP  [reduce using rule 100 (rel_expr)]
    EQ_OP          [reduce using rule 100 (rel_expr)]
    SUB_OP         [reduce using rule 100 (rel_expr)]
    ADD_OP         [reduce using rule 100 (rel_expr)]
    DIV_OP         [reduce using rule 100 (rel_expr)]
    MUL_OP         [reduce using rule 100 (rel_expr)]
    POW_OP         [reduce using rule 100 (rel_expr)]
    $default       reduce using rule 100 (rel_expr)

    num_op  go to state 128
    rel_op  go to state 129


state 144

   34 after_value: COMMA values .

    $default  reduce using rule 34 (after_value)


state 145

   20 expr: num_expr .
   44 fun_def_stmt: $@4 DEF SPACE FUN_NAME eq_stmt num_expr .

    ENDL      reduce using rule 44 (fun_def_stmt)
    $default  reduce using rule 20 (expr)


state 146

   46 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE var . CBRACE eq_stmt num_expr

    CBRACE  shift, and go to state 151


state 147

   49 variable_names: variable_names COMMA SPACE . var

    DIM_VAR   shift, and go to state 7
    VAR_NAME  shift, and go to state 8

    var  go to state 152


state 148

   53 things: thing delimiter things .

    $default  reduce using rule 53 (things)


state 149

   86 control_stmt: $@17 IF SPACE rel_expr SPACE THEN . SPACE NUM_LITERAL

    SPACE  shift, and go to state 153


state 150

   90 iterative_stmt: $@18 FOR SPACE assign_stmt SPACE TO . SPACE num_expr it1

    SPACE  shift, and go to state 154


state 151

   46 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE var CBRACE . eq_stmt num_expr

    SPACE  shift, and go to state 45

    $default  reduce using rule 65 (space_eqs)

    eq_stmt    go to state 155
    space_eqs  go to state 47


state 152

   49 variable_names: variable_names COMMA SPACE var .

    $default  reduce using rule 49 (variable_names)


state 153

   86 control_stmt: $@17 IF SPACE rel_expr SPACE THEN SPACE . NUM_LITERAL

    NUM_LITERAL  shift, and go to state 156


state 154

   90 iterative_stmt: $@18 FOR SPACE assign_stmt SPACE TO SPACE . num_expr it1

    STR_LITERAL    shift, and go to state 83
    NUM_LITERAL    shift, and go to state 84
    FLOAT_LITERAL  shift, and go to state 85
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    expr      go to state 88
    var       go to state 89
    num_expr  go to state 157
    rel_expr  go to state 91
    log_expr  go to state 92


state 155

   46 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE var CBRACE eq_stmt . num_expr

    STR_LITERAL    shift, and go to state 83
    NUM_LITERAL    shift, and go to state 84
    FLOAT_LITERAL  shift, and go to state 85
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    expr      go to state 88
    var       go to state 89
    num_expr  go to state 158
    rel_expr  go to state 91
    log_expr  go to state 92


state 156

   86 control_stmt: $@17 IF SPACE rel_expr SPACE THEN SPACE NUM_LITERAL .

    $default  reduce using rule 86 (control_stmt)


state 157

   20 expr: num_expr .
   90 iterative_stmt: $@18 FOR SPACE assign_stmt SPACE TO SPACE num_expr . it1

    SPACE  shift, and go to state 159

    ENDL      reduce using rule 88 (it1)
    $default  reduce using rule 20 (expr)

    it1  go to state 160


state 158

   20 expr: num_expr .
   46 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE var CBRACE eq_stmt num_expr .

    ENDL      reduce using rule 46 (fun_def_stmt)
    $default  reduce using rule 20 (expr)


state 159

   87 it1: SPACE . STEP SPACE num_expr

    STEP  shift, and go to state 161


state 160

   90 iterative_stmt: $@18 FOR SPACE assign_stmt SPACE TO SPACE num_expr it1 .

    $default  reduce using rule 90 (iterative_stmt)


state 161

   87 it1: SPACE STEP . SPACE num_expr

    SPACE  shift, and go to state 162


state 162

   87 it1: SPACE STEP SPACE . num_expr

    STR_LITERAL    shift, and go to state 83
    NUM_LITERAL    shift, and go to state 84
    FLOAT_LITERAL  shift, and go to state 85
    DIM_VAR        shift, and go to state 7
    OBRACE         shift, and go to state 86
    VAR_NAME       shift, and go to state 8
    SUB_OP         shift, and go to state 87

    expr      go to state 88
    var       go to state 89
    num_expr  go to state 163
    rel_expr  go to state 91
    log_expr  go to state 92


state 163

   20 expr: num_expr .
   87 it1: SPACE STEP SPACE num_expr .

    ENDL      reduce using rule 87 (it1)
    $default  reduce using rule 20 (expr)
