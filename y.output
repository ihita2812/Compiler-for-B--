State 41 conflicts: 7 shift/reduce
State 47 conflicts: 7 shift/reduce
State 57 conflicts: 5 reduce/reduce
State 62 conflicts: 7 shift/reduce
State 63 conflicts: 7 shift/reduce
State 68 conflicts: 7 shift/reduce
State 95 conflicts: 2 shift/reduce
State 99 conflicts: 3 shift/reduce
State 102 conflicts: 7 shift/reduce
State 105 conflicts: 7 shift/reduce
State 108 conflicts: 7 shift/reduce
State 117 conflicts: 2 shift/reduce
State 132 conflicts: 7 shift/reduce
State 134 conflicts: 3 shift/reduce
State 135 conflicts: 3 shift/reduce
State 143 conflicts: 3 shift/reduce
State 146 conflicts: 2 shift/reduce
State 148 conflicts: 2 shift/reduce
State 156 conflicts: 2 shift/reduce


Grammar

    0 $accept: program $end

    1 program: lines line_number END

    2 lines: lines line
    3      | /* empty */

    4 line: line_number stmt ENDL

    5 line_number: LINE_NO SPACE

    6 $@1: /* empty */

    7 stmt: $@1 data_stmt

    8 $@2: /* empty */

    9 stmt: $@2 fun_def_stmt
   10     | dim_def_stmt
   11     | var_def_stmt
   12     | in_stmt
   13     | out_stmt
   14     | assign_stmt
   15     | iterative_stmt
   16     | control_stmt
   17     | fun_call_stmt
   18     | STOP
   19     | goto_stmt
   20     | comment_stmt
   21     | return_call_stmt
   22     | next_stmt

   23 expr: num_expr
   24     | rel_expr
   25     | log_expr
   26     | NUM_LITERAL
   27     | FLOAT_LITERAL
   28     | STR_LITERAL
   29     | var

   30 var: VAR_NAME var2
   31    | DIM_VAR

   32 var2: TYPE
   33     | /* empty */

   34 data_stmt: DATA SPACE values

   35 values: value after_value

   36 after_value: COMMA SPACE values
   37            | /* empty */

   38 value: STR_LITERAL
   39      | NUM_LITERAL
   40      | FLOAT_LITERAL

   41 var_def_stmt: LET SPACE assign_stmt

   42 dim_def_stmt: DIM SPACE DIM_VAR

   43 fun_def_stmt: fun_def fun_body

   44 $@3: /* empty */

   45 fun_def: $@3 DEF SPACE FUN_NAME

   46 fun_body: OBRACE var CBRACE eq_stmt num_expr

   47 $@4: /* empty */

   48 fun_body: $@4 eq_stmt num_expr

   49 in_stmt: INPUT SPACE variable_names

   50 variable_names: variable_names COMMA SPACE var
   51               | var

   52 out_stmt: PRINT SPACE things

   53 things: thing delimiter things
   54       | thing
   55       | /* empty */

   56 delimiter: COMMA
   57          | SEMICOLON

   58 thing: var
   59      | num_expr
   60      | NUM_LITERAL
   61      | FLOAT_LITERAL
   62      | STR_LITERAL

   63 eq_stmt: space_eqs EQ_OP space_eqs

   64 space_eqs: SPACE
   65          | /* empty */

   66 assign_stmt: var eq_stmt rhs

   67 $@5: /* empty */

   68 rhs: $@5 NUM_LITERAL

   69 $@6: /* empty */

   70 rhs: $@6 FLOAT_LITERAL

   71 $@7: /* empty */

   72 rhs: $@7 STR_LITERAL

   73 $@8: /* empty */

   74 rhs: $@8 var

   75 $@9: /* empty */

   76 rhs: $@9 num_expr

   77 fun_call_stmt: GOSUB SPACE NUM_LITERAL

   78 return_call_stmt: RETURN

   79 goto_stmt: GOTO SPACE NUM_LITERAL

   80 comment_stmt: REM

   81 control_stmt: IF SPACE rel_expr SPACE THEN SPACE NUM_LITERAL

   82 it1: SPACE STEP SPACE num_expr
   83    | /* empty */

   84 iterative_stmt: FOR SPACE assign_stmt SPACE TO SPACE num_expr it1

   85 next_stmt: NEXT SPACE VAR_NAME

   86 num_expr: OBRACE expr CBRACE

   87 $@10: /* empty */

   88 num_expr: $@10 expr num_op expr
   89         | SUB_OP expr

   90 num_op: ADD_OP
   91       | SUB_OP
   92       | MUL_OP
   93       | DIV_OP
   94       | POW_OP

   95 rel_expr: expr rel_op expr

   96 rel_op: RELATIONAL_OP
   97       | EQ_OP

   98 log_expr: expr LOGICAL_OP expr


Terminals, with rules where they appear

$end (0) 0
error (256)
LINE_NO (258) 5
STR_LITERAL (259) 28 38 62 72
LOGICAL_OP (260) 98
NUM_LITERAL (261) 26 39 60 68 77 79 81
FLOAT_LITERAL (262) 27 40 61 70
DIM_VAR (263) 31 42
OBRACE (264) 46 86
CBRACE (265) 46 86
VAR_NAME (266) 30 85
FUN_NAME (267) 45
ENDL (268) 4
RELATIONAL_OP (269) 96
PRINT (270) 52
DATA (271) 34
INPUT (272) 49
LET (273) 41
GOTO (274) 79
GOSUB (275) 77
REM (276) 80
DIM (277) 42
IF (278) 81
THEN (279) 81
FOR (280) 84
TO (281) 84
STEP (282) 82
NEXT (283) 85
RETURN (284) 78
STOP (285) 18
END (286) 1
DEF (287) 45
TYPE (288) 32
EQ_OP (289) 63 97
SPACE (290) 5 34 36 41 42 45 49 50 52 64 77 79 81 82 84 85
COMMA (291) 36 50 56
SEMICOLON (292) 57
SUB_OP (293) 89 91
ADD_OP (294) 90
DIV_OP (295) 93
MUL_OP (296) 92
POW_OP (297) 94


Nonterminals, with rules where they appear

$accept (43)
    on left: 0
program (44)
    on left: 1, on right: 0
lines (45)
    on left: 2 3, on right: 1 2
line (46)
    on left: 4, on right: 2
line_number (47)
    on left: 5, on right: 1 4
stmt (48)
    on left: 7 9 10 11 12 13 14 15 16 17 18 19 20 21 22, on right:
    4
$@1 (49)
    on left: 6, on right: 7
$@2 (50)
    on left: 8, on right: 9
expr (51)
    on left: 23 24 25 26 27 28 29, on right: 86 88 89 95 98
var (52)
    on left: 30 31, on right: 29 46 50 51 58 66 74
var2 (53)
    on left: 32 33, on right: 30
data_stmt (54)
    on left: 34, on right: 7
values (55)
    on left: 35, on right: 34 36
after_value (56)
    on left: 36 37, on right: 35
value (57)
    on left: 38 39 40, on right: 35
var_def_stmt (58)
    on left: 41, on right: 11
dim_def_stmt (59)
    on left: 42, on right: 10
fun_def_stmt (60)
    on left: 43, on right: 9
fun_def (61)
    on left: 45, on right: 43
$@3 (62)
    on left: 44, on right: 45
fun_body (63)
    on left: 46 48, on right: 43
$@4 (64)
    on left: 47, on right: 48
in_stmt (65)
    on left: 49, on right: 12
variable_names (66)
    on left: 50 51, on right: 49 50
out_stmt (67)
    on left: 52, on right: 13
things (68)
    on left: 53 54 55, on right: 52 53
delimiter (69)
    on left: 56 57, on right: 53
thing (70)
    on left: 58 59 60 61 62, on right: 53 54
eq_stmt (71)
    on left: 63, on right: 46 48 66
space_eqs (72)
    on left: 64 65, on right: 63
assign_stmt (73)
    on left: 66, on right: 14 41 84
rhs (74)
    on left: 68 70 72 74 76, on right: 66
$@5 (75)
    on left: 67, on right: 68
$@6 (76)
    on left: 69, on right: 70
$@7 (77)
    on left: 71, on right: 72
$@8 (78)
    on left: 73, on right: 74
$@9 (79)
    on left: 75, on right: 76
fun_call_stmt (80)
    on left: 77, on right: 17
return_call_stmt (81)
    on left: 78, on right: 21
goto_stmt (82)
    on left: 79, on right: 19
comment_stmt (83)
    on left: 80, on right: 20
control_stmt (84)
    on left: 81, on right: 16
it1 (85)
    on left: 82 83, on right: 84
iterative_stmt (86)
    on left: 84, on right: 15
next_stmt (87)
    on left: 85, on right: 22
num_expr (88)
    on left: 86 88 89, on right: 23 46 48 59 76 82 84
$@10 (89)
    on left: 87, on right: 88
num_op (90)
    on left: 90 91 92 93 94, on right: 88
rel_expr (91)
    on left: 95, on right: 24 81
rel_op (92)
    on left: 96 97, on right: 95
log_expr (93)
    on left: 98, on right: 25


state 0

    0 $accept: . program $end

    $default  reduce using rule 3 (lines)

    program  go to state 1
    lines    go to state 2


state 1

    0 $accept: program . $end

    $end  shift, and go to state 3


state 2

    1 program: lines . line_number END
    2 lines: lines . line

    LINE_NO  shift, and go to state 4

    line         go to state 5
    line_number  go to state 6


state 3

    0 $accept: program $end .

    $default  accept


state 4

    5 line_number: LINE_NO . SPACE

    SPACE  shift, and go to state 7


state 5

    2 lines: lines line .

    $default  reduce using rule 2 (lines)


state 6

    1 program: lines line_number . END
    4 line: line_number . stmt ENDL

    DIM_VAR   shift, and go to state 8
    VAR_NAME  shift, and go to state 9
    PRINT     shift, and go to state 10
    INPUT     shift, and go to state 11
    LET       shift, and go to state 12
    GOTO      shift, and go to state 13
    GOSUB     shift, and go to state 14
    REM       shift, and go to state 15
    DIM       shift, and go to state 16
    IF        shift, and go to state 17
    FOR       shift, and go to state 18
    NEXT      shift, and go to state 19
    RETURN    shift, and go to state 20
    STOP      shift, and go to state 21
    END       shift, and go to state 22

    DEF       reduce using rule 8 ($@2)
    $default  reduce using rule 6 ($@1)

    stmt              go to state 23
    $@1               go to state 24
    $@2               go to state 25
    var               go to state 26
    var_def_stmt      go to state 27
    dim_def_stmt      go to state 28
    in_stmt           go to state 29
    out_stmt          go to state 30
    assign_stmt       go to state 31
    fun_call_stmt     go to state 32
    return_call_stmt  go to state 33
    goto_stmt         go to state 34
    comment_stmt      go to state 35
    control_stmt      go to state 36
    iterative_stmt    go to state 37
    next_stmt         go to state 38


state 7

    5 line_number: LINE_NO SPACE .

    $default  reduce using rule 5 (line_number)


state 8

   31 var: DIM_VAR .

    $default  reduce using rule 31 (var)


state 9

   30 var: VAR_NAME . var2

    TYPE  shift, and go to state 39

    $default  reduce using rule 33 (var2)

    var2  go to state 40


state 10

   52 out_stmt: PRINT . SPACE things

    SPACE  shift, and go to state 41


state 11

   49 in_stmt: INPUT . SPACE variable_names

    SPACE  shift, and go to state 42


state 12

   41 var_def_stmt: LET . SPACE assign_stmt

    SPACE  shift, and go to state 43


state 13

   79 goto_stmt: GOTO . SPACE NUM_LITERAL

    SPACE  shift, and go to state 44


state 14

   77 fun_call_stmt: GOSUB . SPACE NUM_LITERAL

    SPACE  shift, and go to state 45


state 15

   80 comment_stmt: REM .

    $default  reduce using rule 80 (comment_stmt)


state 16

   42 dim_def_stmt: DIM . SPACE DIM_VAR

    SPACE  shift, and go to state 46


state 17

   81 control_stmt: IF . SPACE rel_expr SPACE THEN SPACE NUM_LITERAL

    SPACE  shift, and go to state 47


state 18

   84 iterative_stmt: FOR . SPACE assign_stmt SPACE TO SPACE num_expr it1

    SPACE  shift, and go to state 48


state 19

   85 next_stmt: NEXT . SPACE VAR_NAME

    SPACE  shift, and go to state 49


state 20

   78 return_call_stmt: RETURN .

    $default  reduce using rule 78 (return_call_stmt)


state 21

   18 stmt: STOP .

    $default  reduce using rule 18 (stmt)


state 22

    1 program: lines line_number END .

    $default  reduce using rule 1 (program)


state 23

    4 line: line_number stmt . ENDL

    ENDL  shift, and go to state 50


state 24

    7 stmt: $@1 . data_stmt

    DATA  shift, and go to state 51

    data_stmt  go to state 52


state 25

    9 stmt: $@2 . fun_def_stmt

    $default  reduce using rule 44 ($@3)

    fun_def_stmt  go to state 53
    fun_def       go to state 54
    $@3           go to state 55


state 26

   66 assign_stmt: var . eq_stmt rhs

    SPACE  shift, and go to state 56

    $default  reduce using rule 65 (space_eqs)

    eq_stmt    go to state 57
    space_eqs  go to state 58


state 27

   11 stmt: var_def_stmt .

    $default  reduce using rule 11 (stmt)


state 28

   10 stmt: dim_def_stmt .

    $default  reduce using rule 10 (stmt)


state 29

   12 stmt: in_stmt .

    $default  reduce using rule 12 (stmt)


state 30

   13 stmt: out_stmt .

    $default  reduce using rule 13 (stmt)


state 31

   14 stmt: assign_stmt .

    $default  reduce using rule 14 (stmt)


state 32

   17 stmt: fun_call_stmt .

    $default  reduce using rule 17 (stmt)


state 33

   21 stmt: return_call_stmt .

    $default  reduce using rule 21 (stmt)


state 34

   19 stmt: goto_stmt .

    $default  reduce using rule 19 (stmt)


state 35

   20 stmt: comment_stmt .

    $default  reduce using rule 20 (stmt)


state 36

   16 stmt: control_stmt .

    $default  reduce using rule 16 (stmt)


state 37

   15 stmt: iterative_stmt .

    $default  reduce using rule 15 (stmt)


state 38

   22 stmt: next_stmt .

    $default  reduce using rule 22 (stmt)


state 39

   32 var2: TYPE .

    $default  reduce using rule 32 (var2)


state 40

   30 var: VAR_NAME var2 .

    $default  reduce using rule 30 (var)


state 41

   52 out_stmt: PRINT SPACE . things

    STR_LITERAL    shift, and go to state 59
    NUM_LITERAL    shift, and go to state 60
    FLOAT_LITERAL  shift, and go to state 61
    DIM_VAR        shift, and go to state 8
    OBRACE         shift, and go to state 62
    VAR_NAME       shift, and go to state 9
    SUB_OP         shift, and go to state 63

    STR_LITERAL    [reduce using rule 87 ($@10)]
    NUM_LITERAL    [reduce using rule 87 ($@10)]
    FLOAT_LITERAL  [reduce using rule 87 ($@10)]
    DIM_VAR        [reduce using rule 87 ($@10)]
    OBRACE         [reduce using rule 87 ($@10)]
    VAR_NAME       [reduce using rule 87 ($@10)]
    SUB_OP         [reduce using rule 87 ($@10)]
    $default       reduce using rule 55 (things)

    var       go to state 64
    things    go to state 65
    thing     go to state 66
    num_expr  go to state 67
    $@10      go to state 68


state 42

   49 in_stmt: INPUT SPACE . variable_names

    DIM_VAR   shift, and go to state 8
    VAR_NAME  shift, and go to state 9

    var             go to state 69
    variable_names  go to state 70


state 43

   41 var_def_stmt: LET SPACE . assign_stmt

    DIM_VAR   shift, and go to state 8
    VAR_NAME  shift, and go to state 9

    var          go to state 26
    assign_stmt  go to state 71


state 44

   79 goto_stmt: GOTO SPACE . NUM_LITERAL

    NUM_LITERAL  shift, and go to state 72


state 45

   77 fun_call_stmt: GOSUB SPACE . NUM_LITERAL

    NUM_LITERAL  shift, and go to state 73


state 46

   42 dim_def_stmt: DIM SPACE . DIM_VAR

    DIM_VAR  shift, and go to state 74


state 47

   81 control_stmt: IF SPACE . rel_expr SPACE THEN SPACE NUM_LITERAL

    STR_LITERAL    shift, and go to state 75
    NUM_LITERAL    shift, and go to state 76
    FLOAT_LITERAL  shift, and go to state 77
    DIM_VAR        shift, and go to state 8
    OBRACE         shift, and go to state 62
    VAR_NAME       shift, and go to state 9
    SUB_OP         shift, and go to state 63

    STR_LITERAL    [reduce using rule 87 ($@10)]
    NUM_LITERAL    [reduce using rule 87 ($@10)]
    FLOAT_LITERAL  [reduce using rule 87 ($@10)]
    DIM_VAR        [reduce using rule 87 ($@10)]
    OBRACE         [reduce using rule 87 ($@10)]
    VAR_NAME       [reduce using rule 87 ($@10)]
    SUB_OP         [reduce using rule 87 ($@10)]

    expr      go to state 78
    var       go to state 79
    num_expr  go to state 80
    $@10      go to state 68
    rel_expr  go to state 81
    log_expr  go to state 82


state 48

   84 iterative_stmt: FOR SPACE . assign_stmt SPACE TO SPACE num_expr it1

    DIM_VAR   shift, and go to state 8
    VAR_NAME  shift, and go to state 9

    var          go to state 26
    assign_stmt  go to state 83


state 49

   85 next_stmt: NEXT SPACE . VAR_NAME

    VAR_NAME  shift, and go to state 84


state 50

    4 line: line_number stmt ENDL .

    $default  reduce using rule 4 (line)


state 51

   34 data_stmt: DATA . SPACE values

    SPACE  shift, and go to state 85


state 52

    7 stmt: $@1 data_stmt .

    $default  reduce using rule 7 (stmt)


state 53

    9 stmt: $@2 fun_def_stmt .

    $default  reduce using rule 9 (stmt)


state 54

   43 fun_def_stmt: fun_def . fun_body

    OBRACE  shift, and go to state 86

    $default  reduce using rule 47 ($@4)

    fun_body  go to state 87
    $@4       go to state 88


state 55

   45 fun_def: $@3 . DEF SPACE FUN_NAME

    DEF  shift, and go to state 89


state 56

   64 space_eqs: SPACE .

    $default  reduce using rule 64 (space_eqs)


state 57

   66 assign_stmt: var eq_stmt . rhs

    STR_LITERAL    reduce using rule 71 ($@7)
    STR_LITERAL    [reduce using rule 75 ($@9)]
    NUM_LITERAL    reduce using rule 67 ($@5)
    NUM_LITERAL    [reduce using rule 75 ($@9)]
    FLOAT_LITERAL  reduce using rule 69 ($@6)
    FLOAT_LITERAL  [reduce using rule 75 ($@9)]
    DIM_VAR        reduce using rule 73 ($@8)
    DIM_VAR        [reduce using rule 75 ($@9)]
    OBRACE         reduce using rule 75 ($@9)
    VAR_NAME       reduce using rule 73 ($@8)
    VAR_NAME       [reduce using rule 75 ($@9)]
    SUB_OP         reduce using rule 75 ($@9)
    $default       reduce using rule 73 ($@8)

    rhs  go to state 90
    $@5  go to state 91
    $@6  go to state 92
    $@7  go to state 93
    $@8  go to state 94
    $@9  go to state 95


state 58

   63 eq_stmt: space_eqs . EQ_OP space_eqs

    EQ_OP  shift, and go to state 96


state 59

   62 thing: STR_LITERAL .

    $default  reduce using rule 62 (thing)


state 60

   60 thing: NUM_LITERAL .

    $default  reduce using rule 60 (thing)


state 61

   61 thing: FLOAT_LITERAL .

    $default  reduce using rule 61 (thing)


state 62

   86 num_expr: OBRACE . expr CBRACE

    STR_LITERAL    shift, and go to state 75
    NUM_LITERAL    shift, and go to state 76
    FLOAT_LITERAL  shift, and go to state 77
    DIM_VAR        shift, and go to state 8
    OBRACE         shift, and go to state 62
    VAR_NAME       shift, and go to state 9
    SUB_OP         shift, and go to state 63

    STR_LITERAL    [reduce using rule 87 ($@10)]
    NUM_LITERAL    [reduce using rule 87 ($@10)]
    FLOAT_LITERAL  [reduce using rule 87 ($@10)]
    DIM_VAR        [reduce using rule 87 ($@10)]
    OBRACE         [reduce using rule 87 ($@10)]
    VAR_NAME       [reduce using rule 87 ($@10)]
    SUB_OP         [reduce using rule 87 ($@10)]

    expr      go to state 97
    var       go to state 79
    num_expr  go to state 80
    $@10      go to state 68
    rel_expr  go to state 98
    log_expr  go to state 82


state 63

   89 num_expr: SUB_OP . expr

    STR_LITERAL    shift, and go to state 75
    NUM_LITERAL    shift, and go to state 76
    FLOAT_LITERAL  shift, and go to state 77
    DIM_VAR        shift, and go to state 8
    OBRACE         shift, and go to state 62
    VAR_NAME       shift, and go to state 9
    SUB_OP         shift, and go to state 63

    STR_LITERAL    [reduce using rule 87 ($@10)]
    NUM_LITERAL    [reduce using rule 87 ($@10)]
    FLOAT_LITERAL  [reduce using rule 87 ($@10)]
    DIM_VAR        [reduce using rule 87 ($@10)]
    OBRACE         [reduce using rule 87 ($@10)]
    VAR_NAME       [reduce using rule 87 ($@10)]
    SUB_OP         [reduce using rule 87 ($@10)]

    expr      go to state 99
    var       go to state 79
    num_expr  go to state 80
    $@10      go to state 68
    rel_expr  go to state 98
    log_expr  go to state 82


state 64

   58 thing: var .

    $default  reduce using rule 58 (thing)


state 65

   52 out_stmt: PRINT SPACE things .

    $default  reduce using rule 52 (out_stmt)


state 66

   53 things: thing . delimiter things
   54       | thing .

    COMMA      shift, and go to state 100
    SEMICOLON  shift, and go to state 101

    $default  reduce using rule 54 (things)

    delimiter  go to state 102


state 67

   59 thing: num_expr .

    $default  reduce using rule 59 (thing)


state 68

   88 num_expr: $@10 . expr num_op expr

    STR_LITERAL    shift, and go to state 75
    NUM_LITERAL    shift, and go to state 76
    FLOAT_LITERAL  shift, and go to state 77
    DIM_VAR        shift, and go to state 8
    OBRACE         shift, and go to state 62
    VAR_NAME       shift, and go to state 9
    SUB_OP         shift, and go to state 63

    STR_LITERAL    [reduce using rule 87 ($@10)]
    NUM_LITERAL    [reduce using rule 87 ($@10)]
    FLOAT_LITERAL  [reduce using rule 87 ($@10)]
    DIM_VAR        [reduce using rule 87 ($@10)]
    OBRACE         [reduce using rule 87 ($@10)]
    VAR_NAME       [reduce using rule 87 ($@10)]
    SUB_OP         [reduce using rule 87 ($@10)]

    expr      go to state 103
    var       go to state 79
    num_expr  go to state 80
    $@10      go to state 68
    rel_expr  go to state 98
    log_expr  go to state 82


state 69

   51 variable_names: var .

    $default  reduce using rule 51 (variable_names)


state 70

   49 in_stmt: INPUT SPACE variable_names .
   50 variable_names: variable_names . COMMA SPACE var

    COMMA  shift, and go to state 104

    $default  reduce using rule 49 (in_stmt)


state 71

   41 var_def_stmt: LET SPACE assign_stmt .

    $default  reduce using rule 41 (var_def_stmt)


state 72

   79 goto_stmt: GOTO SPACE NUM_LITERAL .

    $default  reduce using rule 79 (goto_stmt)


state 73

   77 fun_call_stmt: GOSUB SPACE NUM_LITERAL .

    $default  reduce using rule 77 (fun_call_stmt)


state 74

   42 dim_def_stmt: DIM SPACE DIM_VAR .

    $default  reduce using rule 42 (dim_def_stmt)


state 75

   28 expr: STR_LITERAL .

    $default  reduce using rule 28 (expr)


state 76

   26 expr: NUM_LITERAL .

    $default  reduce using rule 26 (expr)


state 77

   27 expr: FLOAT_LITERAL .

    $default  reduce using rule 27 (expr)


state 78

   95 rel_expr: expr . rel_op expr
   98 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 105
    RELATIONAL_OP  shift, and go to state 106
    EQ_OP          shift, and go to state 107

    rel_op  go to state 108


state 79

   29 expr: var .

    $default  reduce using rule 29 (expr)


state 80

   23 expr: num_expr .

    $default  reduce using rule 23 (expr)


state 81

   24 expr: rel_expr .
   81 control_stmt: IF SPACE rel_expr . SPACE THEN SPACE NUM_LITERAL

    SPACE  shift, and go to state 109

    $default  reduce using rule 24 (expr)


state 82

   25 expr: log_expr .

    $default  reduce using rule 25 (expr)


state 83

   84 iterative_stmt: FOR SPACE assign_stmt . SPACE TO SPACE num_expr it1

    SPACE  shift, and go to state 110


state 84

   85 next_stmt: NEXT SPACE VAR_NAME .

    $default  reduce using rule 85 (next_stmt)


state 85

   34 data_stmt: DATA SPACE . values

    STR_LITERAL    shift, and go to state 111
    NUM_LITERAL    shift, and go to state 112
    FLOAT_LITERAL  shift, and go to state 113

    values  go to state 114
    value   go to state 115


state 86

   46 fun_body: OBRACE . var CBRACE eq_stmt num_expr

    DIM_VAR   shift, and go to state 8
    VAR_NAME  shift, and go to state 9

    var  go to state 116


state 87

   43 fun_def_stmt: fun_def fun_body .

    $default  reduce using rule 43 (fun_def_stmt)


state 88

   48 fun_body: $@4 . eq_stmt num_expr

    SPACE  shift, and go to state 56

    $default  reduce using rule 65 (space_eqs)

    eq_stmt    go to state 117
    space_eqs  go to state 58


state 89

   45 fun_def: $@3 DEF . SPACE FUN_NAME

    SPACE  shift, and go to state 118


state 90

   66 assign_stmt: var eq_stmt rhs .

    $default  reduce using rule 66 (assign_stmt)


state 91

   68 rhs: $@5 . NUM_LITERAL

    NUM_LITERAL  shift, and go to state 119


state 92

   70 rhs: $@6 . FLOAT_LITERAL

    FLOAT_LITERAL  shift, and go to state 120


state 93

   72 rhs: $@7 . STR_LITERAL

    STR_LITERAL  shift, and go to state 121


state 94

   74 rhs: $@8 . var

    DIM_VAR   shift, and go to state 8
    VAR_NAME  shift, and go to state 9

    var  go to state 122


state 95

   76 rhs: $@9 . num_expr

    OBRACE  shift, and go to state 62
    SUB_OP  shift, and go to state 63

    OBRACE    [reduce using rule 87 ($@10)]
    SUB_OP    [reduce using rule 87 ($@10)]
    $default  reduce using rule 87 ($@10)

    num_expr  go to state 123
    $@10      go to state 68


state 96

   63 eq_stmt: space_eqs EQ_OP . space_eqs

    SPACE  shift, and go to state 56

    $default  reduce using rule 65 (space_eqs)

    space_eqs  go to state 124


state 97

   86 num_expr: OBRACE expr . CBRACE
   95 rel_expr: expr . rel_op expr
   98 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 105
    CBRACE         shift, and go to state 125
    RELATIONAL_OP  shift, and go to state 106
    EQ_OP          shift, and go to state 107

    rel_op  go to state 108


state 98

   24 expr: rel_expr .

    $default  reduce using rule 24 (expr)


state 99

   89 num_expr: SUB_OP expr .
   95 rel_expr: expr . rel_op expr
   98 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 105
    RELATIONAL_OP  shift, and go to state 106
    EQ_OP          shift, and go to state 107

    LOGICAL_OP     [reduce using rule 89 (num_expr)]
    RELATIONAL_OP  [reduce using rule 89 (num_expr)]
    EQ_OP          [reduce using rule 89 (num_expr)]
    $default       reduce using rule 89 (num_expr)

    rel_op  go to state 108


state 100

   56 delimiter: COMMA .

    $default  reduce using rule 56 (delimiter)


state 101

   57 delimiter: SEMICOLON .

    $default  reduce using rule 57 (delimiter)


state 102

   53 things: thing delimiter . things

    STR_LITERAL    shift, and go to state 59
    NUM_LITERAL    shift, and go to state 60
    FLOAT_LITERAL  shift, and go to state 61
    DIM_VAR        shift, and go to state 8
    OBRACE         shift, and go to state 62
    VAR_NAME       shift, and go to state 9
    SUB_OP         shift, and go to state 63

    STR_LITERAL    [reduce using rule 87 ($@10)]
    NUM_LITERAL    [reduce using rule 87 ($@10)]
    FLOAT_LITERAL  [reduce using rule 87 ($@10)]
    DIM_VAR        [reduce using rule 87 ($@10)]
    OBRACE         [reduce using rule 87 ($@10)]
    VAR_NAME       [reduce using rule 87 ($@10)]
    SUB_OP         [reduce using rule 87 ($@10)]
    $default       reduce using rule 55 (things)

    var       go to state 64
    things    go to state 126
    thing     go to state 66
    num_expr  go to state 67
    $@10      go to state 68


state 103

   88 num_expr: $@10 expr . num_op expr
   95 rel_expr: expr . rel_op expr
   98 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 105
    RELATIONAL_OP  shift, and go to state 106
    EQ_OP          shift, and go to state 107
    SUB_OP         shift, and go to state 127
    ADD_OP         shift, and go to state 128
    DIV_OP         shift, and go to state 129
    MUL_OP         shift, and go to state 130
    POW_OP         shift, and go to state 131

    num_op  go to state 132
    rel_op  go to state 108


state 104

   50 variable_names: variable_names COMMA . SPACE var

    SPACE  shift, and go to state 133


state 105

   98 log_expr: expr LOGICAL_OP . expr

    STR_LITERAL    shift, and go to state 75
    NUM_LITERAL    shift, and go to state 76
    FLOAT_LITERAL  shift, and go to state 77
    DIM_VAR        shift, and go to state 8
    OBRACE         shift, and go to state 62
    VAR_NAME       shift, and go to state 9
    SUB_OP         shift, and go to state 63

    STR_LITERAL    [reduce using rule 87 ($@10)]
    NUM_LITERAL    [reduce using rule 87 ($@10)]
    FLOAT_LITERAL  [reduce using rule 87 ($@10)]
    DIM_VAR        [reduce using rule 87 ($@10)]
    OBRACE         [reduce using rule 87 ($@10)]
    VAR_NAME       [reduce using rule 87 ($@10)]
    SUB_OP         [reduce using rule 87 ($@10)]

    expr      go to state 134
    var       go to state 79
    num_expr  go to state 80
    $@10      go to state 68
    rel_expr  go to state 98
    log_expr  go to state 82


state 106

   96 rel_op: RELATIONAL_OP .

    $default  reduce using rule 96 (rel_op)


state 107

   97 rel_op: EQ_OP .

    $default  reduce using rule 97 (rel_op)


state 108

   95 rel_expr: expr rel_op . expr

    STR_LITERAL    shift, and go to state 75
    NUM_LITERAL    shift, and go to state 76
    FLOAT_LITERAL  shift, and go to state 77
    DIM_VAR        shift, and go to state 8
    OBRACE         shift, and go to state 62
    VAR_NAME       shift, and go to state 9
    SUB_OP         shift, and go to state 63

    STR_LITERAL    [reduce using rule 87 ($@10)]
    NUM_LITERAL    [reduce using rule 87 ($@10)]
    FLOAT_LITERAL  [reduce using rule 87 ($@10)]
    DIM_VAR        [reduce using rule 87 ($@10)]
    OBRACE         [reduce using rule 87 ($@10)]
    VAR_NAME       [reduce using rule 87 ($@10)]
    SUB_OP         [reduce using rule 87 ($@10)]

    expr      go to state 135
    var       go to state 79
    num_expr  go to state 80
    $@10      go to state 68
    rel_expr  go to state 98
    log_expr  go to state 82


state 109

   81 control_stmt: IF SPACE rel_expr SPACE . THEN SPACE NUM_LITERAL

    THEN  shift, and go to state 136


state 110

   84 iterative_stmt: FOR SPACE assign_stmt SPACE . TO SPACE num_expr it1

    TO  shift, and go to state 137


state 111

   38 value: STR_LITERAL .

    $default  reduce using rule 38 (value)


state 112

   39 value: NUM_LITERAL .

    $default  reduce using rule 39 (value)


state 113

   40 value: FLOAT_LITERAL .

    $default  reduce using rule 40 (value)


state 114

   34 data_stmt: DATA SPACE values .

    $default  reduce using rule 34 (data_stmt)


state 115

   35 values: value . after_value

    COMMA  shift, and go to state 138

    $default  reduce using rule 37 (after_value)

    after_value  go to state 139


state 116

   46 fun_body: OBRACE var . CBRACE eq_stmt num_expr

    CBRACE  shift, and go to state 140


state 117

   48 fun_body: $@4 eq_stmt . num_expr

    OBRACE  shift, and go to state 62
    SUB_OP  shift, and go to state 63

    OBRACE    [reduce using rule 87 ($@10)]
    SUB_OP    [reduce using rule 87 ($@10)]
    $default  reduce using rule 87 ($@10)

    num_expr  go to state 141
    $@10      go to state 68


state 118

   45 fun_def: $@3 DEF SPACE . FUN_NAME

    FUN_NAME  shift, and go to state 142


state 119

   68 rhs: $@5 NUM_LITERAL .

    $default  reduce using rule 68 (rhs)


state 120

   70 rhs: $@6 FLOAT_LITERAL .

    $default  reduce using rule 70 (rhs)


state 121

   72 rhs: $@7 STR_LITERAL .

    $default  reduce using rule 72 (rhs)


state 122

   74 rhs: $@8 var .

    $default  reduce using rule 74 (rhs)


state 123

   76 rhs: $@9 num_expr .

    $default  reduce using rule 76 (rhs)


state 124

   63 eq_stmt: space_eqs EQ_OP space_eqs .

    $default  reduce using rule 63 (eq_stmt)


state 125

   86 num_expr: OBRACE expr CBRACE .

    $default  reduce using rule 86 (num_expr)


state 126

   53 things: thing delimiter things .

    $default  reduce using rule 53 (things)


state 127

   91 num_op: SUB_OP .

    $default  reduce using rule 91 (num_op)


state 128

   90 num_op: ADD_OP .

    $default  reduce using rule 90 (num_op)


state 129

   93 num_op: DIV_OP .

    $default  reduce using rule 93 (num_op)


state 130

   92 num_op: MUL_OP .

    $default  reduce using rule 92 (num_op)


state 131

   94 num_op: POW_OP .

    $default  reduce using rule 94 (num_op)


state 132

   88 num_expr: $@10 expr num_op . expr

    STR_LITERAL    shift, and go to state 75
    NUM_LITERAL    shift, and go to state 76
    FLOAT_LITERAL  shift, and go to state 77
    DIM_VAR        shift, and go to state 8
    OBRACE         shift, and go to state 62
    VAR_NAME       shift, and go to state 9
    SUB_OP         shift, and go to state 63

    STR_LITERAL    [reduce using rule 87 ($@10)]
    NUM_LITERAL    [reduce using rule 87 ($@10)]
    FLOAT_LITERAL  [reduce using rule 87 ($@10)]
    DIM_VAR        [reduce using rule 87 ($@10)]
    OBRACE         [reduce using rule 87 ($@10)]
    VAR_NAME       [reduce using rule 87 ($@10)]
    SUB_OP         [reduce using rule 87 ($@10)]

    expr      go to state 143
    var       go to state 79
    num_expr  go to state 80
    $@10      go to state 68
    rel_expr  go to state 98
    log_expr  go to state 82


state 133

   50 variable_names: variable_names COMMA SPACE . var

    DIM_VAR   shift, and go to state 8
    VAR_NAME  shift, and go to state 9

    var  go to state 144


state 134

   95 rel_expr: expr . rel_op expr
   98 log_expr: expr . LOGICAL_OP expr
   98         | expr LOGICAL_OP expr .

    LOGICAL_OP     shift, and go to state 105
    RELATIONAL_OP  shift, and go to state 106
    EQ_OP          shift, and go to state 107

    LOGICAL_OP     [reduce using rule 98 (log_expr)]
    RELATIONAL_OP  [reduce using rule 98 (log_expr)]
    EQ_OP          [reduce using rule 98 (log_expr)]
    $default       reduce using rule 98 (log_expr)

    rel_op  go to state 108


state 135

   95 rel_expr: expr . rel_op expr
   95         | expr rel_op expr .
   98 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 105
    RELATIONAL_OP  shift, and go to state 106
    EQ_OP          shift, and go to state 107

    LOGICAL_OP     [reduce using rule 95 (rel_expr)]
    RELATIONAL_OP  [reduce using rule 95 (rel_expr)]
    EQ_OP          [reduce using rule 95 (rel_expr)]
    $default       reduce using rule 95 (rel_expr)

    rel_op  go to state 108


state 136

   81 control_stmt: IF SPACE rel_expr SPACE THEN . SPACE NUM_LITERAL

    SPACE  shift, and go to state 145


state 137

   84 iterative_stmt: FOR SPACE assign_stmt SPACE TO . SPACE num_expr it1

    SPACE  shift, and go to state 146


state 138

   36 after_value: COMMA . SPACE values

    SPACE  shift, and go to state 147


state 139

   35 values: value after_value .

    $default  reduce using rule 35 (values)


state 140

   46 fun_body: OBRACE var CBRACE . eq_stmt num_expr

    SPACE  shift, and go to state 56

    $default  reduce using rule 65 (space_eqs)

    eq_stmt    go to state 148
    space_eqs  go to state 58


state 141

   48 fun_body: $@4 eq_stmt num_expr .

    $default  reduce using rule 48 (fun_body)


state 142

   45 fun_def: $@3 DEF SPACE FUN_NAME .

    $default  reduce using rule 45 (fun_def)


state 143

   88 num_expr: $@10 expr num_op expr .
   95 rel_expr: expr . rel_op expr
   98 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 105
    RELATIONAL_OP  shift, and go to state 106
    EQ_OP          shift, and go to state 107

    LOGICAL_OP     [reduce using rule 88 (num_expr)]
    RELATIONAL_OP  [reduce using rule 88 (num_expr)]
    EQ_OP          [reduce using rule 88 (num_expr)]
    $default       reduce using rule 88 (num_expr)

    rel_op  go to state 108


state 144

   50 variable_names: variable_names COMMA SPACE var .

    $default  reduce using rule 50 (variable_names)


state 145

   81 control_stmt: IF SPACE rel_expr SPACE THEN SPACE . NUM_LITERAL

    NUM_LITERAL  shift, and go to state 149


state 146

   84 iterative_stmt: FOR SPACE assign_stmt SPACE TO SPACE . num_expr it1

    OBRACE  shift, and go to state 62
    SUB_OP  shift, and go to state 63

    OBRACE    [reduce using rule 87 ($@10)]
    SUB_OP    [reduce using rule 87 ($@10)]
    $default  reduce using rule 87 ($@10)

    num_expr  go to state 150
    $@10      go to state 68


state 147

   36 after_value: COMMA SPACE . values

    STR_LITERAL    shift, and go to state 111
    NUM_LITERAL    shift, and go to state 112
    FLOAT_LITERAL  shift, and go to state 113

    values  go to state 151
    value   go to state 115


state 148

   46 fun_body: OBRACE var CBRACE eq_stmt . num_expr

    OBRACE  shift, and go to state 62
    SUB_OP  shift, and go to state 63

    OBRACE    [reduce using rule 87 ($@10)]
    SUB_OP    [reduce using rule 87 ($@10)]
    $default  reduce using rule 87 ($@10)

    num_expr  go to state 152
    $@10      go to state 68


state 149

   81 control_stmt: IF SPACE rel_expr SPACE THEN SPACE NUM_LITERAL .

    $default  reduce using rule 81 (control_stmt)


state 150

   84 iterative_stmt: FOR SPACE assign_stmt SPACE TO SPACE num_expr . it1

    SPACE  shift, and go to state 153

    $default  reduce using rule 83 (it1)

    it1  go to state 154


state 151

   36 after_value: COMMA SPACE values .

    $default  reduce using rule 36 (after_value)


state 152

   46 fun_body: OBRACE var CBRACE eq_stmt num_expr .

    $default  reduce using rule 46 (fun_body)


state 153

   82 it1: SPACE . STEP SPACE num_expr

    STEP  shift, and go to state 155


state 154

   84 iterative_stmt: FOR SPACE assign_stmt SPACE TO SPACE num_expr it1 .

    $default  reduce using rule 84 (iterative_stmt)


state 155

   82 it1: SPACE STEP . SPACE num_expr

    SPACE  shift, and go to state 156


state 156

   82 it1: SPACE STEP SPACE . num_expr

    OBRACE  shift, and go to state 62
    SUB_OP  shift, and go to state 63

    OBRACE    [reduce using rule 87 ($@10)]
    SUB_OP    [reduce using rule 87 ($@10)]
    $default  reduce using rule 87 ($@10)

    num_expr  go to state 157
    $@10      go to state 68


state 157

   82 it1: SPACE STEP SPACE num_expr .

    $default  reduce using rule 82 (it1)
