Rules useless in parser due to conflicts

   46 $@5: /* empty */

   70 @10: /* empty */

   72 @11: /* empty */

   74 @12: /* empty */

   76 @13: /* empty */

   90 $@20: /* empty */


State 6 conflicts: 4 reduce/reduce
State 71 conflicts: 2 reduce/reduce
State 90 conflicts: 2 reduce/reduce
State 91 conflicts: 2 reduce/reduce
State 141 conflicts: 5 shift/reduce
State 168 conflicts: 10 shift/reduce
State 169 conflicts: 5 shift/reduce
State 170 conflicts: 5 shift/reduce
State 171 conflicts: 5 shift/reduce
State 172 conflicts: 5 shift/reduce
State 173 conflicts: 5 shift/reduce
State 174 conflicts: 10 shift/reduce


Grammar

    0 $accept: program $end

    1 program: lines

    2 lines: line lines
    3      | line
    4      | end_line

    5 end_line: LINE_NO SPACE END

    6 line: LINE_NO SPACE stmt

    7 stmt: data_stmt
    8     | fun_def_stmt
    9     | dim_def_stmt
   10     | var_def_stmt
   11     | in_stmt
   12     | out_stmt
   13     | assign_stmt
   14     | iterative_stmt
   15     | control_stmt
   16     | fun_call_stmt
   17     | STOP ENDL
   18     | goto_stmt
   19     | comment_stmt
   20     | return_call_stmt
   21     | next_stmt

   22 expr: num_expr
   23     | rel_expr
   24     | log_expr
   25     | NUM_LITERAL
   26     | FLOAT_LITERAL
   27     | STR_LITERAL
   28     | var

   29 var: VAR_NAME var2
   30    | DIM_VAR

   31 var2: TYPE
   32     | /* empty */

   33 $@1: /* empty */

   34 data_stmt: $@1 DATA SPACE values ENDL

   35 values: value COMMA SPACE values
   36       | value

   37 value: STR_LITERAL
   38      | NUM_LITERAL
   39      | FLOAT_LITERAL

   40 $@2: /* empty */

   41 var_def_stmt: $@2 LET SPACE assign_stmt ENDL

   42 $@3: /* empty */

   43 dim_def_stmt: $@3 DIM SPACE DIM_VAR ENDL

   44 $@4: /* empty */

   45 fun_def_stmt: $@4 DEF SPACE FUN_NAME eq_stmt num_expr ENDL

   46 $@5: /* empty */

   47 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE var CBRACE eq_stmt num_expr ENDL

   48 $@6: /* empty */

   49 in_stmt: $@6 INPUT SPACE variable_names ENDL

   50 variable_names: variable_names COMMA SPACE var
   51               | var

   52 $@7: /* empty */

   53 out_stmt: $@7 PRINT SPACE things ENDL

   54 things: thing delimiter things
   55       | thing
   56       | /* empty */

   57 delimiter: COMMA
   58          | SEMICOLON

   59 thing: var
   60      | num_expr
   61      | NUM_LITERAL
   62      | FLOAT_LITERAL
   63      | STR_LITERAL

   64 $@8: /* empty */

   65 eq_stmt: $@8 space_eqs EQ_OP space_eqs

   66 space_eqs: SPACE
   67          | /* empty */

   68 @9: /* empty */

   69 assign_stmt: @9 var eq_stmt NUM_LITERAL

   70 @10: /* empty */

   71 assign_stmt: @10 var eq_stmt num_expr

   72 @11: /* empty */

   73 assign_stmt: @11 var eq_stmt STR_LITERAL

   74 @12: /* empty */

   75 assign_stmt: @12 var eq_stmt var

   76 @13: /* empty */

   77 assign_stmt: @13 var eq_stmt FLOAT_LITERAL

   78 $@14: /* empty */

   79 fun_call_stmt: $@14 GOSUB SPACE NUM_LITERAL ENDL

   80 $@15: /* empty */

   81 return_call_stmt: $@15 RETURN ENDL

   82 $@16: /* empty */

   83 goto_stmt: $@16 GOTO SPACE NUM_LITERAL ENDL

   84 $@17: /* empty */

   85 comment_stmt: $@17 REM ENDL

   86 $@18: /* empty */

   87 control_stmt: $@18 IF SPACE rel_expr THEN NUM_LITERAL ENDL

   88 $@19: /* empty */

   89 iterative_stmt: $@19 FOR SPACE assign_stmt SPACE TO SPACE num_expr SPACE STEP SPACE num_expr ENDL

   90 $@20: /* empty */

   91 iterative_stmt: $@20 FOR SPACE assign_stmt SPACE TO SPACE num_expr ENDL

   92 next_stmt: NEXT VAR_NAME ENDL

   93 num_expr: expr '+' expr
   94         | expr '-' expr
   95         | expr '*' expr
   96         | expr '/' expr
   97         | expr '^' expr
   98         | '-' expr
   99         | OBRACE expr CBRACE

  100 rel_expr: expr rel_op expr

  101 rel_op: RELATIONAL_OP
  102       | '<'
  103       | '>'
  104       | EQ_OP

  105 log_expr: expr LOGICAL_OP expr


Terminals, with rules where they appear

$end (0) 0
'*' (42) 95
'+' (43) 93
'-' (45) 94 98
'/' (47) 96
'<' (60) 102
'>' (62) 103
'^' (94) 97
error (256)
LINE_NO (258) 5 6
STR_LITERAL (259) 27 37 63 73
LOGICAL_OP (260) 105
NUM_LITERAL (261) 25 38 61 69 79 83 87
FLOAT_LITERAL (262) 26 39 62 77
DIM_VAR (263) 30 43
OBRACE (264) 47 99
CBRACE (265) 47 99
VAR_NAME (266) 29 92
FUN_NAME (267) 45 47
ENDL (268) 17 34 41 43 45 47 49 53 79 81 83 85 87 89 91 92
RELATIONAL_OP (269) 101
PRINT (270) 53
DATA (271) 34
INPUT (272) 49
LET (273) 41
GOTO (274) 83
GOSUB (275) 79
REM (276) 85
DIM (277) 43
IF (278) 87
THEN (279) 87
FOR (280) 89 91
TO (281) 89 91
STEP (282) 89
NEXT (283) 92
RETURN (284) 81
STOP (285) 17
END (286) 5
DEF (287) 45 47
TYPE (288) 31
EQ_OP (289) 65 104
SPACE (290) 5 6 34 35 41 43 45 47 49 50 53 66 79 83 87 89 91
COMMA (291) 35 50 57
SEMICOLON (292) 58


Nonterminals, with rules where they appear

$accept (45)
    on left: 0
program (46)
    on left: 1, on right: 0
lines (47)
    on left: 2 3 4, on right: 1 2
end_line (48)
    on left: 5, on right: 4
line (49)
    on left: 6, on right: 2 3
stmt (50)
    on left: 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21, on right: 6
expr (51)
    on left: 22 23 24 25 26 27 28, on right: 93 94 95 96 97 98 99 100
    105
var (52)
    on left: 29 30, on right: 28 47 50 51 59 69 71 73 75 77
var2 (53)
    on left: 31 32, on right: 29
data_stmt (54)
    on left: 34, on right: 7
$@1 (55)
    on left: 33, on right: 34
values (56)
    on left: 35 36, on right: 34 35
value (57)
    on left: 37 38 39, on right: 35 36
var_def_stmt (58)
    on left: 41, on right: 10
$@2 (59)
    on left: 40, on right: 41
dim_def_stmt (60)
    on left: 43, on right: 9
$@3 (61)
    on left: 42, on right: 43
fun_def_stmt (62)
    on left: 45 47, on right: 8
$@4 (63)
    on left: 44, on right: 45
$@5 (64)
    on left: 46, on right: 47
in_stmt (65)
    on left: 49, on right: 11
$@6 (66)
    on left: 48, on right: 49
variable_names (67)
    on left: 50 51, on right: 49 50
out_stmt (68)
    on left: 53, on right: 12
$@7 (69)
    on left: 52, on right: 53
things (70)
    on left: 54 55 56, on right: 53 54
delimiter (71)
    on left: 57 58, on right: 54
thing (72)
    on left: 59 60 61 62 63, on right: 54 55
eq_stmt (73)
    on left: 65, on right: 45 47 69 71 73 75 77
$@8 (74)
    on left: 64, on right: 65
space_eqs (75)
    on left: 66 67, on right: 65
assign_stmt (76)
    on left: 69 71 73 75 77, on right: 13 41 89 91
@9 (77)
    on left: 68, on right: 69
@10 (78)
    on left: 70, on right: 71
@11 (79)
    on left: 72, on right: 73
@12 (80)
    on left: 74, on right: 75
@13 (81)
    on left: 76, on right: 77
fun_call_stmt (82)
    on left: 79, on right: 16
$@14 (83)
    on left: 78, on right: 79
return_call_stmt (84)
    on left: 81, on right: 20
$@15 (85)
    on left: 80, on right: 81
goto_stmt (86)
    on left: 83, on right: 18
$@16 (87)
    on left: 82, on right: 83
comment_stmt (88)
    on left: 85, on right: 19
$@17 (89)
    on left: 84, on right: 85
control_stmt (90)
    on left: 87, on right: 15
$@18 (91)
    on left: 86, on right: 87
iterative_stmt (92)
    on left: 89 91, on right: 14
$@19 (93)
    on left: 88, on right: 89
$@20 (94)
    on left: 90, on right: 91
next_stmt (95)
    on left: 92, on right: 21
num_expr (96)
    on left: 93 94 95 96 97 98 99, on right: 22 45 47 60 71 89 91
rel_expr (97)
    on left: 100, on right: 23 87
rel_op (98)
    on left: 101 102 103 104, on right: 100
log_expr (99)
    on left: 105, on right: 24


state 0

    0 $accept: . program $end

    LINE_NO  shift, and go to state 1

    program   go to state 2
    lines     go to state 3
    end_line  go to state 4
    line      go to state 5


state 1

    5 end_line: LINE_NO . SPACE END
    6 line: LINE_NO . SPACE stmt

    SPACE  shift, and go to state 6


state 2

    0 $accept: program . $end

    $end  shift, and go to state 7


state 3

    1 program: lines .

    $default  reduce using rule 1 (program)


state 4

    4 lines: end_line .

    $default  reduce using rule 4 (lines)


state 5

    2 lines: line . lines
    3      | line .

    LINE_NO  shift, and go to state 1

    $default  reduce using rule 3 (lines)

    lines     go to state 8
    end_line  go to state 4
    line      go to state 5


state 6

    5 end_line: LINE_NO SPACE . END
    6 line: LINE_NO SPACE . stmt

    NEXT  shift, and go to state 9
    STOP  shift, and go to state 10
    END   shift, and go to state 11

    DIM_VAR   reduce using rule 68 (@9)
    DIM_VAR   [reduce using rule 70 (@10)]
    DIM_VAR   [reduce using rule 72 (@11)]
    DIM_VAR   [reduce using rule 74 (@12)]
    DIM_VAR   [reduce using rule 76 (@13)]
    VAR_NAME  reduce using rule 68 (@9)
    VAR_NAME  [reduce using rule 70 (@10)]
    VAR_NAME  [reduce using rule 72 (@11)]
    VAR_NAME  [reduce using rule 74 (@12)]
    VAR_NAME  [reduce using rule 76 (@13)]
    PRINT     reduce using rule 52 ($@7)
    DATA      reduce using rule 33 ($@1)
    INPUT     reduce using rule 48 ($@6)
    LET       reduce using rule 40 ($@2)
    GOTO      reduce using rule 82 ($@16)
    GOSUB     reduce using rule 78 ($@14)
    REM       reduce using rule 84 ($@17)
    DIM       reduce using rule 42 ($@3)
    IF        reduce using rule 86 ($@18)
    FOR       reduce using rule 88 ($@19)
    FOR       [reduce using rule 90 ($@20)]
    RETURN    reduce using rule 80 ($@15)
    DEF       reduce using rule 44 ($@4)
    DEF       [reduce using rule 46 ($@5)]
    $default  reduce using rule 68 (@9)

    stmt              go to state 12
    data_stmt         go to state 13
    $@1               go to state 14
    var_def_stmt      go to state 15
    $@2               go to state 16
    dim_def_stmt      go to state 17
    $@3               go to state 18
    fun_def_stmt      go to state 19
    $@4               go to state 20
    $@5               go to state 21
    in_stmt           go to state 22
    $@6               go to state 23
    out_stmt          go to state 24
    $@7               go to state 25
    assign_stmt       go to state 26
    @9                go to state 27
    @10               go to state 28
    @11               go to state 29
    @12               go to state 30
    @13               go to state 31
    fun_call_stmt     go to state 32
    $@14              go to state 33
    return_call_stmt  go to state 34
    $@15              go to state 35
    goto_stmt         go to state 36
    $@16              go to state 37
    comment_stmt      go to state 38
    $@17              go to state 39
    control_stmt      go to state 40
    $@18              go to state 41
    iterative_stmt    go to state 42
    $@19              go to state 43
    $@20              go to state 44
    next_stmt         go to state 45


state 7

    0 $accept: program $end .

    $default  accept


state 8

    2 lines: line lines .

    $default  reduce using rule 2 (lines)


state 9

   92 next_stmt: NEXT . VAR_NAME ENDL

    VAR_NAME  shift, and go to state 46


state 10

   17 stmt: STOP . ENDL

    ENDL  shift, and go to state 47


state 11

    5 end_line: LINE_NO SPACE END .

    $default  reduce using rule 5 (end_line)


state 12

    6 line: LINE_NO SPACE stmt .

    $default  reduce using rule 6 (line)


state 13

    7 stmt: data_stmt .

    $default  reduce using rule 7 (stmt)


state 14

   34 data_stmt: $@1 . DATA SPACE values ENDL

    DATA  shift, and go to state 48


state 15

   10 stmt: var_def_stmt .

    $default  reduce using rule 10 (stmt)


state 16

   41 var_def_stmt: $@2 . LET SPACE assign_stmt ENDL

    LET  shift, and go to state 49


state 17

    9 stmt: dim_def_stmt .

    $default  reduce using rule 9 (stmt)


state 18

   43 dim_def_stmt: $@3 . DIM SPACE DIM_VAR ENDL

    DIM  shift, and go to state 50


state 19

    8 stmt: fun_def_stmt .

    $default  reduce using rule 8 (stmt)


state 20

   45 fun_def_stmt: $@4 . DEF SPACE FUN_NAME eq_stmt num_expr ENDL

    DEF  shift, and go to state 51


state 21

   47 fun_def_stmt: $@5 . DEF SPACE FUN_NAME OBRACE var CBRACE eq_stmt num_expr ENDL

    DEF  shift, and go to state 52


state 22

   11 stmt: in_stmt .

    $default  reduce using rule 11 (stmt)


state 23

   49 in_stmt: $@6 . INPUT SPACE variable_names ENDL

    INPUT  shift, and go to state 53


state 24

   12 stmt: out_stmt .

    $default  reduce using rule 12 (stmt)


state 25

   53 out_stmt: $@7 . PRINT SPACE things ENDL

    PRINT  shift, and go to state 54


state 26

   13 stmt: assign_stmt .

    $default  reduce using rule 13 (stmt)


state 27

   69 assign_stmt: @9 . var eq_stmt NUM_LITERAL

    DIM_VAR   shift, and go to state 55
    VAR_NAME  shift, and go to state 56

    var  go to state 57


state 28

   71 assign_stmt: @10 . var eq_stmt num_expr

    DIM_VAR   shift, and go to state 55
    VAR_NAME  shift, and go to state 56

    var  go to state 58


state 29

   73 assign_stmt: @11 . var eq_stmt STR_LITERAL

    DIM_VAR   shift, and go to state 55
    VAR_NAME  shift, and go to state 56

    var  go to state 59


state 30

   75 assign_stmt: @12 . var eq_stmt var

    DIM_VAR   shift, and go to state 55
    VAR_NAME  shift, and go to state 56

    var  go to state 60


state 31

   77 assign_stmt: @13 . var eq_stmt FLOAT_LITERAL

    DIM_VAR   shift, and go to state 55
    VAR_NAME  shift, and go to state 56

    var  go to state 61


state 32

   16 stmt: fun_call_stmt .

    $default  reduce using rule 16 (stmt)


state 33

   79 fun_call_stmt: $@14 . GOSUB SPACE NUM_LITERAL ENDL

    GOSUB  shift, and go to state 62


state 34

   20 stmt: return_call_stmt .

    $default  reduce using rule 20 (stmt)


state 35

   81 return_call_stmt: $@15 . RETURN ENDL

    RETURN  shift, and go to state 63


state 36

   18 stmt: goto_stmt .

    $default  reduce using rule 18 (stmt)


state 37

   83 goto_stmt: $@16 . GOTO SPACE NUM_LITERAL ENDL

    GOTO  shift, and go to state 64


state 38

   19 stmt: comment_stmt .

    $default  reduce using rule 19 (stmt)


state 39

   85 comment_stmt: $@17 . REM ENDL

    REM  shift, and go to state 65


state 40

   15 stmt: control_stmt .

    $default  reduce using rule 15 (stmt)


state 41

   87 control_stmt: $@18 . IF SPACE rel_expr THEN NUM_LITERAL ENDL

    IF  shift, and go to state 66


state 42

   14 stmt: iterative_stmt .

    $default  reduce using rule 14 (stmt)


state 43

   89 iterative_stmt: $@19 . FOR SPACE assign_stmt SPACE TO SPACE num_expr SPACE STEP SPACE num_expr ENDL

    FOR  shift, and go to state 67


state 44

   91 iterative_stmt: $@20 . FOR SPACE assign_stmt SPACE TO SPACE num_expr ENDL

    FOR  shift, and go to state 68


state 45

   21 stmt: next_stmt .

    $default  reduce using rule 21 (stmt)


state 46

   92 next_stmt: NEXT VAR_NAME . ENDL

    ENDL  shift, and go to state 69


state 47

   17 stmt: STOP ENDL .

    $default  reduce using rule 17 (stmt)


state 48

   34 data_stmt: $@1 DATA . SPACE values ENDL

    SPACE  shift, and go to state 70


state 49

   41 var_def_stmt: $@2 LET . SPACE assign_stmt ENDL

    SPACE  shift, and go to state 71


state 50

   43 dim_def_stmt: $@3 DIM . SPACE DIM_VAR ENDL

    SPACE  shift, and go to state 72


state 51

   45 fun_def_stmt: $@4 DEF . SPACE FUN_NAME eq_stmt num_expr ENDL

    SPACE  shift, and go to state 73


state 52

   47 fun_def_stmt: $@5 DEF . SPACE FUN_NAME OBRACE var CBRACE eq_stmt num_expr ENDL

    SPACE  shift, and go to state 74


state 53

   49 in_stmt: $@6 INPUT . SPACE variable_names ENDL

    SPACE  shift, and go to state 75


state 54

   53 out_stmt: $@7 PRINT . SPACE things ENDL

    SPACE  shift, and go to state 76


state 55

   30 var: DIM_VAR .

    $default  reduce using rule 30 (var)


state 56

   29 var: VAR_NAME . var2

    TYPE  shift, and go to state 77

    $default  reduce using rule 32 (var2)

    var2  go to state 78


state 57

   69 assign_stmt: @9 var . eq_stmt NUM_LITERAL

    $default  reduce using rule 64 ($@8)

    eq_stmt  go to state 79
    $@8      go to state 80


state 58

   71 assign_stmt: @10 var . eq_stmt num_expr

    $default  reduce using rule 64 ($@8)

    eq_stmt  go to state 81
    $@8      go to state 80


state 59

   73 assign_stmt: @11 var . eq_stmt STR_LITERAL

    $default  reduce using rule 64 ($@8)

    eq_stmt  go to state 82
    $@8      go to state 80


state 60

   75 assign_stmt: @12 var . eq_stmt var

    $default  reduce using rule 64 ($@8)

    eq_stmt  go to state 83
    $@8      go to state 80


state 61

   77 assign_stmt: @13 var . eq_stmt FLOAT_LITERAL

    $default  reduce using rule 64 ($@8)

    eq_stmt  go to state 84
    $@8      go to state 80


state 62

   79 fun_call_stmt: $@14 GOSUB . SPACE NUM_LITERAL ENDL

    SPACE  shift, and go to state 85


state 63

   81 return_call_stmt: $@15 RETURN . ENDL

    ENDL  shift, and go to state 86


state 64

   83 goto_stmt: $@16 GOTO . SPACE NUM_LITERAL ENDL

    SPACE  shift, and go to state 87


state 65

   85 comment_stmt: $@17 REM . ENDL

    ENDL  shift, and go to state 88


state 66

   87 control_stmt: $@18 IF . SPACE rel_expr THEN NUM_LITERAL ENDL

    SPACE  shift, and go to state 89


state 67

   89 iterative_stmt: $@19 FOR . SPACE assign_stmt SPACE TO SPACE num_expr SPACE STEP SPACE num_expr ENDL

    SPACE  shift, and go to state 90


state 68

   91 iterative_stmt: $@20 FOR . SPACE assign_stmt SPACE TO SPACE num_expr ENDL

    SPACE  shift, and go to state 91


state 69

   92 next_stmt: NEXT VAR_NAME ENDL .

    $default  reduce using rule 92 (next_stmt)


state 70

   34 data_stmt: $@1 DATA SPACE . values ENDL

    STR_LITERAL    shift, and go to state 92
    NUM_LITERAL    shift, and go to state 93
    FLOAT_LITERAL  shift, and go to state 94

    values  go to state 95
    value   go to state 96


state 71

   41 var_def_stmt: $@2 LET SPACE . assign_stmt ENDL

    DIM_VAR   reduce using rule 68 (@9)
    DIM_VAR   [reduce using rule 70 (@10)]
    DIM_VAR   [reduce using rule 72 (@11)]
    DIM_VAR   [reduce using rule 74 (@12)]
    DIM_VAR   [reduce using rule 76 (@13)]
    VAR_NAME  reduce using rule 68 (@9)
    VAR_NAME  [reduce using rule 70 (@10)]
    VAR_NAME  [reduce using rule 72 (@11)]
    VAR_NAME  [reduce using rule 74 (@12)]
    VAR_NAME  [reduce using rule 76 (@13)]
    $default  reduce using rule 68 (@9)

    assign_stmt  go to state 97
    @9           go to state 27
    @10          go to state 28
    @11          go to state 29
    @12          go to state 30
    @13          go to state 31


state 72

   43 dim_def_stmt: $@3 DIM SPACE . DIM_VAR ENDL

    DIM_VAR  shift, and go to state 98


state 73

   45 fun_def_stmt: $@4 DEF SPACE . FUN_NAME eq_stmt num_expr ENDL

    FUN_NAME  shift, and go to state 99


state 74

   47 fun_def_stmt: $@5 DEF SPACE . FUN_NAME OBRACE var CBRACE eq_stmt num_expr ENDL

    FUN_NAME  shift, and go to state 100


state 75

   49 in_stmt: $@6 INPUT SPACE . variable_names ENDL

    DIM_VAR   shift, and go to state 55
    VAR_NAME  shift, and go to state 56

    var             go to state 101
    variable_names  go to state 102


state 76

   53 out_stmt: $@7 PRINT SPACE . things ENDL

    STR_LITERAL    shift, and go to state 103
    NUM_LITERAL    shift, and go to state 104
    FLOAT_LITERAL  shift, and go to state 105
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    $default  reduce using rule 56 (things)

    expr      go to state 108
    var       go to state 109
    things    go to state 110
    thing     go to state 111
    num_expr  go to state 112
    rel_expr  go to state 113
    log_expr  go to state 114


state 77

   31 var2: TYPE .

    $default  reduce using rule 31 (var2)


state 78

   29 var: VAR_NAME var2 .

    $default  reduce using rule 29 (var)


state 79

   69 assign_stmt: @9 var eq_stmt . NUM_LITERAL

    NUM_LITERAL  shift, and go to state 115


state 80

   65 eq_stmt: $@8 . space_eqs EQ_OP space_eqs

    SPACE  shift, and go to state 116

    $default  reduce using rule 67 (space_eqs)

    space_eqs  go to state 117


state 81

   71 assign_stmt: @10 var eq_stmt . num_expr

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 108
    var       go to state 121
    num_expr  go to state 122
    rel_expr  go to state 113
    log_expr  go to state 114


state 82

   73 assign_stmt: @11 var eq_stmt . STR_LITERAL

    STR_LITERAL  shift, and go to state 123


state 83

   75 assign_stmt: @12 var eq_stmt . var

    DIM_VAR   shift, and go to state 55
    VAR_NAME  shift, and go to state 56

    var  go to state 124


state 84

   77 assign_stmt: @13 var eq_stmt . FLOAT_LITERAL

    FLOAT_LITERAL  shift, and go to state 125


state 85

   79 fun_call_stmt: $@14 GOSUB SPACE . NUM_LITERAL ENDL

    NUM_LITERAL  shift, and go to state 126


state 86

   81 return_call_stmt: $@15 RETURN ENDL .

    $default  reduce using rule 81 (return_call_stmt)


state 87

   83 goto_stmt: $@16 GOTO SPACE . NUM_LITERAL ENDL

    NUM_LITERAL  shift, and go to state 127


state 88

   85 comment_stmt: $@17 REM ENDL .

    $default  reduce using rule 85 (comment_stmt)


state 89

   87 control_stmt: $@18 IF SPACE . rel_expr THEN NUM_LITERAL ENDL

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 108
    var       go to state 121
    num_expr  go to state 128
    rel_expr  go to state 129
    log_expr  go to state 114


state 90

   89 iterative_stmt: $@19 FOR SPACE . assign_stmt SPACE TO SPACE num_expr SPACE STEP SPACE num_expr ENDL

    DIM_VAR   reduce using rule 68 (@9)
    DIM_VAR   [reduce using rule 70 (@10)]
    DIM_VAR   [reduce using rule 72 (@11)]
    DIM_VAR   [reduce using rule 74 (@12)]
    DIM_VAR   [reduce using rule 76 (@13)]
    VAR_NAME  reduce using rule 68 (@9)
    VAR_NAME  [reduce using rule 70 (@10)]
    VAR_NAME  [reduce using rule 72 (@11)]
    VAR_NAME  [reduce using rule 74 (@12)]
    VAR_NAME  [reduce using rule 76 (@13)]
    $default  reduce using rule 68 (@9)

    assign_stmt  go to state 130
    @9           go to state 27
    @10          go to state 28
    @11          go to state 29
    @12          go to state 30
    @13          go to state 31


state 91

   91 iterative_stmt: $@20 FOR SPACE . assign_stmt SPACE TO SPACE num_expr ENDL

    DIM_VAR   reduce using rule 68 (@9)
    DIM_VAR   [reduce using rule 70 (@10)]
    DIM_VAR   [reduce using rule 72 (@11)]
    DIM_VAR   [reduce using rule 74 (@12)]
    DIM_VAR   [reduce using rule 76 (@13)]
    VAR_NAME  reduce using rule 68 (@9)
    VAR_NAME  [reduce using rule 70 (@10)]
    VAR_NAME  [reduce using rule 72 (@11)]
    VAR_NAME  [reduce using rule 74 (@12)]
    VAR_NAME  [reduce using rule 76 (@13)]
    $default  reduce using rule 68 (@9)

    assign_stmt  go to state 131
    @9           go to state 27
    @10          go to state 28
    @11          go to state 29
    @12          go to state 30
    @13          go to state 31


state 92

   37 value: STR_LITERAL .

    $default  reduce using rule 37 (value)


state 93

   38 value: NUM_LITERAL .

    $default  reduce using rule 38 (value)


state 94

   39 value: FLOAT_LITERAL .

    $default  reduce using rule 39 (value)


state 95

   34 data_stmt: $@1 DATA SPACE values . ENDL

    ENDL  shift, and go to state 132


state 96

   35 values: value . COMMA SPACE values
   36       | value .

    COMMA  shift, and go to state 133

    $default  reduce using rule 36 (values)


state 97

   41 var_def_stmt: $@2 LET SPACE assign_stmt . ENDL

    ENDL  shift, and go to state 134


state 98

   43 dim_def_stmt: $@3 DIM SPACE DIM_VAR . ENDL

    ENDL  shift, and go to state 135


state 99

   45 fun_def_stmt: $@4 DEF SPACE FUN_NAME . eq_stmt num_expr ENDL

    $default  reduce using rule 64 ($@8)

    eq_stmt  go to state 136
    $@8      go to state 80


state 100

   47 fun_def_stmt: $@5 DEF SPACE FUN_NAME . OBRACE var CBRACE eq_stmt num_expr ENDL

    OBRACE  shift, and go to state 137


state 101

   51 variable_names: var .

    $default  reduce using rule 51 (variable_names)


state 102

   49 in_stmt: $@6 INPUT SPACE variable_names . ENDL
   50 variable_names: variable_names . COMMA SPACE var

    ENDL   shift, and go to state 138
    COMMA  shift, and go to state 139


state 103

   27 expr: STR_LITERAL .
   63 thing: STR_LITERAL .

    ENDL       reduce using rule 63 (thing)
    COMMA      reduce using rule 63 (thing)
    SEMICOLON  reduce using rule 63 (thing)
    $default   reduce using rule 27 (expr)


state 104

   25 expr: NUM_LITERAL .
   61 thing: NUM_LITERAL .

    ENDL       reduce using rule 61 (thing)
    COMMA      reduce using rule 61 (thing)
    SEMICOLON  reduce using rule 61 (thing)
    $default   reduce using rule 25 (expr)


state 105

   26 expr: FLOAT_LITERAL .
   62 thing: FLOAT_LITERAL .

    ENDL       reduce using rule 62 (thing)
    COMMA      reduce using rule 62 (thing)
    SEMICOLON  reduce using rule 62 (thing)
    $default   reduce using rule 26 (expr)


state 106

   99 num_expr: OBRACE . expr CBRACE

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 140
    var       go to state 121
    num_expr  go to state 128
    rel_expr  go to state 113
    log_expr  go to state 114


state 107

   98 num_expr: '-' . expr

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 141
    var       go to state 121
    num_expr  go to state 128
    rel_expr  go to state 113
    log_expr  go to state 114


state 108

   93 num_expr: expr . '+' expr
   94         | expr . '-' expr
   95         | expr . '*' expr
   96         | expr . '/' expr
   97         | expr . '^' expr
  100 rel_expr: expr . rel_op expr
  105 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 142
    RELATIONAL_OP  shift, and go to state 143
    EQ_OP          shift, and go to state 144
    '+'            shift, and go to state 145
    '-'            shift, and go to state 146
    '*'            shift, and go to state 147
    '/'            shift, and go to state 148
    '^'            shift, and go to state 149
    '<'            shift, and go to state 150
    '>'            shift, and go to state 151

    rel_op  go to state 152


state 109

   28 expr: var .
   59 thing: var .

    ENDL       reduce using rule 59 (thing)
    COMMA      reduce using rule 59 (thing)
    SEMICOLON  reduce using rule 59 (thing)
    $default   reduce using rule 28 (expr)


state 110

   53 out_stmt: $@7 PRINT SPACE things . ENDL

    ENDL  shift, and go to state 153


state 111

   54 things: thing . delimiter things
   55       | thing .

    COMMA      shift, and go to state 154
    SEMICOLON  shift, and go to state 155

    $default  reduce using rule 55 (things)

    delimiter  go to state 156


state 112

   22 expr: num_expr .
   60 thing: num_expr .

    ENDL       reduce using rule 60 (thing)
    COMMA      reduce using rule 60 (thing)
    SEMICOLON  reduce using rule 60 (thing)
    $default   reduce using rule 22 (expr)


state 113

   23 expr: rel_expr .

    $default  reduce using rule 23 (expr)


state 114

   24 expr: log_expr .

    $default  reduce using rule 24 (expr)


state 115

   69 assign_stmt: @9 var eq_stmt NUM_LITERAL .

    $default  reduce using rule 69 (assign_stmt)


state 116

   66 space_eqs: SPACE .

    $default  reduce using rule 66 (space_eqs)


state 117

   65 eq_stmt: $@8 space_eqs . EQ_OP space_eqs

    EQ_OP  shift, and go to state 157


state 118

   27 expr: STR_LITERAL .

    $default  reduce using rule 27 (expr)


state 119

   25 expr: NUM_LITERAL .

    $default  reduce using rule 25 (expr)


state 120

   26 expr: FLOAT_LITERAL .

    $default  reduce using rule 26 (expr)


state 121

   28 expr: var .

    $default  reduce using rule 28 (expr)


state 122

   22 expr: num_expr .
   71 assign_stmt: @10 var eq_stmt num_expr .

    $end      reduce using rule 71 (assign_stmt)
    LINE_NO   reduce using rule 71 (assign_stmt)
    ENDL      reduce using rule 71 (assign_stmt)
    SPACE     reduce using rule 71 (assign_stmt)
    $default  reduce using rule 22 (expr)


state 123

   73 assign_stmt: @11 var eq_stmt STR_LITERAL .

    $default  reduce using rule 73 (assign_stmt)


state 124

   75 assign_stmt: @12 var eq_stmt var .

    $default  reduce using rule 75 (assign_stmt)


state 125

   77 assign_stmt: @13 var eq_stmt FLOAT_LITERAL .

    $default  reduce using rule 77 (assign_stmt)


state 126

   79 fun_call_stmt: $@14 GOSUB SPACE NUM_LITERAL . ENDL

    ENDL  shift, and go to state 158


state 127

   83 goto_stmt: $@16 GOTO SPACE NUM_LITERAL . ENDL

    ENDL  shift, and go to state 159


state 128

   22 expr: num_expr .

    $default  reduce using rule 22 (expr)


state 129

   23 expr: rel_expr .
   87 control_stmt: $@18 IF SPACE rel_expr . THEN NUM_LITERAL ENDL

    THEN  shift, and go to state 160

    $default  reduce using rule 23 (expr)


state 130

   89 iterative_stmt: $@19 FOR SPACE assign_stmt . SPACE TO SPACE num_expr SPACE STEP SPACE num_expr ENDL

    SPACE  shift, and go to state 161


state 131

   91 iterative_stmt: $@20 FOR SPACE assign_stmt . SPACE TO SPACE num_expr ENDL

    SPACE  shift, and go to state 162


state 132

   34 data_stmt: $@1 DATA SPACE values ENDL .

    $default  reduce using rule 34 (data_stmt)


state 133

   35 values: value COMMA . SPACE values

    SPACE  shift, and go to state 163


state 134

   41 var_def_stmt: $@2 LET SPACE assign_stmt ENDL .

    $default  reduce using rule 41 (var_def_stmt)


state 135

   43 dim_def_stmt: $@3 DIM SPACE DIM_VAR ENDL .

    $default  reduce using rule 43 (dim_def_stmt)


state 136

   45 fun_def_stmt: $@4 DEF SPACE FUN_NAME eq_stmt . num_expr ENDL

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 108
    var       go to state 121
    num_expr  go to state 164
    rel_expr  go to state 113
    log_expr  go to state 114


state 137

   47 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE . var CBRACE eq_stmt num_expr ENDL

    DIM_VAR   shift, and go to state 55
    VAR_NAME  shift, and go to state 56

    var  go to state 165


state 138

   49 in_stmt: $@6 INPUT SPACE variable_names ENDL .

    $default  reduce using rule 49 (in_stmt)


state 139

   50 variable_names: variable_names COMMA . SPACE var

    SPACE  shift, and go to state 166


state 140

   93 num_expr: expr . '+' expr
   94         | expr . '-' expr
   95         | expr . '*' expr
   96         | expr . '/' expr
   97         | expr . '^' expr
   99         | OBRACE expr . CBRACE
  100 rel_expr: expr . rel_op expr
  105 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 142
    CBRACE         shift, and go to state 167
    RELATIONAL_OP  shift, and go to state 143
    EQ_OP          shift, and go to state 144
    '+'            shift, and go to state 145
    '-'            shift, and go to state 146
    '*'            shift, and go to state 147
    '/'            shift, and go to state 148
    '^'            shift, and go to state 149
    '<'            shift, and go to state 150
    '>'            shift, and go to state 151

    rel_op  go to state 152


state 141

   93 num_expr: expr . '+' expr
   94         | expr . '-' expr
   95         | expr . '*' expr
   96         | expr . '/' expr
   97         | expr . '^' expr
   98         | '-' expr .
  100 rel_expr: expr . rel_op expr
  105 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 142
    RELATIONAL_OP  shift, and go to state 143
    EQ_OP          shift, and go to state 144
    '*'            shift, and go to state 147
    '/'            shift, and go to state 148
    '^'            shift, and go to state 149
    '<'            shift, and go to state 150
    '>'            shift, and go to state 151

    LOGICAL_OP     [reduce using rule 98 (num_expr)]
    RELATIONAL_OP  [reduce using rule 98 (num_expr)]
    EQ_OP          [reduce using rule 98 (num_expr)]
    '<'            [reduce using rule 98 (num_expr)]
    '>'            [reduce using rule 98 (num_expr)]
    $default       reduce using rule 98 (num_expr)

    rel_op  go to state 152


state 142

  105 log_expr: expr LOGICAL_OP . expr

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 168
    var       go to state 121
    num_expr  go to state 128
    rel_expr  go to state 113
    log_expr  go to state 114


state 143

  101 rel_op: RELATIONAL_OP .

    $default  reduce using rule 101 (rel_op)


state 144

  104 rel_op: EQ_OP .

    $default  reduce using rule 104 (rel_op)


state 145

   93 num_expr: expr '+' . expr

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 169
    var       go to state 121
    num_expr  go to state 128
    rel_expr  go to state 113
    log_expr  go to state 114


state 146

   94 num_expr: expr '-' . expr

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 170
    var       go to state 121
    num_expr  go to state 128
    rel_expr  go to state 113
    log_expr  go to state 114


state 147

   95 num_expr: expr '*' . expr

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 171
    var       go to state 121
    num_expr  go to state 128
    rel_expr  go to state 113
    log_expr  go to state 114


state 148

   96 num_expr: expr '/' . expr

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 172
    var       go to state 121
    num_expr  go to state 128
    rel_expr  go to state 113
    log_expr  go to state 114


state 149

   97 num_expr: expr '^' . expr

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 173
    var       go to state 121
    num_expr  go to state 128
    rel_expr  go to state 113
    log_expr  go to state 114


state 150

  102 rel_op: '<' .

    $default  reduce using rule 102 (rel_op)


state 151

  103 rel_op: '>' .

    $default  reduce using rule 103 (rel_op)


state 152

  100 rel_expr: expr rel_op . expr

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 174
    var       go to state 121
    num_expr  go to state 128
    rel_expr  go to state 113
    log_expr  go to state 114


state 153

   53 out_stmt: $@7 PRINT SPACE things ENDL .

    $default  reduce using rule 53 (out_stmt)


state 154

   57 delimiter: COMMA .

    $default  reduce using rule 57 (delimiter)


state 155

   58 delimiter: SEMICOLON .

    $default  reduce using rule 58 (delimiter)


state 156

   54 things: thing delimiter . things

    STR_LITERAL    shift, and go to state 103
    NUM_LITERAL    shift, and go to state 104
    FLOAT_LITERAL  shift, and go to state 105
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    $default  reduce using rule 56 (things)

    expr      go to state 108
    var       go to state 109
    things    go to state 175
    thing     go to state 111
    num_expr  go to state 112
    rel_expr  go to state 113
    log_expr  go to state 114


state 157

   65 eq_stmt: $@8 space_eqs EQ_OP . space_eqs

    SPACE  shift, and go to state 116

    $default  reduce using rule 67 (space_eqs)

    space_eqs  go to state 176


state 158

   79 fun_call_stmt: $@14 GOSUB SPACE NUM_LITERAL ENDL .

    $default  reduce using rule 79 (fun_call_stmt)


state 159

   83 goto_stmt: $@16 GOTO SPACE NUM_LITERAL ENDL .

    $default  reduce using rule 83 (goto_stmt)


state 160

   87 control_stmt: $@18 IF SPACE rel_expr THEN . NUM_LITERAL ENDL

    NUM_LITERAL  shift, and go to state 177


state 161

   89 iterative_stmt: $@19 FOR SPACE assign_stmt SPACE . TO SPACE num_expr SPACE STEP SPACE num_expr ENDL

    TO  shift, and go to state 178


state 162

   91 iterative_stmt: $@20 FOR SPACE assign_stmt SPACE . TO SPACE num_expr ENDL

    TO  shift, and go to state 179


state 163

   35 values: value COMMA SPACE . values

    STR_LITERAL    shift, and go to state 92
    NUM_LITERAL    shift, and go to state 93
    FLOAT_LITERAL  shift, and go to state 94

    values  go to state 180
    value   go to state 96


state 164

   22 expr: num_expr .
   45 fun_def_stmt: $@4 DEF SPACE FUN_NAME eq_stmt num_expr . ENDL

    ENDL  shift, and go to state 181

    $default  reduce using rule 22 (expr)


state 165

   47 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE var . CBRACE eq_stmt num_expr ENDL

    CBRACE  shift, and go to state 182


state 166

   50 variable_names: variable_names COMMA SPACE . var

    DIM_VAR   shift, and go to state 55
    VAR_NAME  shift, and go to state 56

    var  go to state 183


state 167

   99 num_expr: OBRACE expr CBRACE .

    $default  reduce using rule 99 (num_expr)


state 168

   93 num_expr: expr . '+' expr
   94         | expr . '-' expr
   95         | expr . '*' expr
   96         | expr . '/' expr
   97         | expr . '^' expr
  100 rel_expr: expr . rel_op expr
  105 log_expr: expr . LOGICAL_OP expr
  105         | expr LOGICAL_OP expr .

    LOGICAL_OP     shift, and go to state 142
    RELATIONAL_OP  shift, and go to state 143
    EQ_OP          shift, and go to state 144
    '+'            shift, and go to state 145
    '-'            shift, and go to state 146
    '*'            shift, and go to state 147
    '/'            shift, and go to state 148
    '^'            shift, and go to state 149
    '<'            shift, and go to state 150
    '>'            shift, and go to state 151

    LOGICAL_OP     [reduce using rule 105 (log_expr)]
    RELATIONAL_OP  [reduce using rule 105 (log_expr)]
    EQ_OP          [reduce using rule 105 (log_expr)]
    '+'            [reduce using rule 105 (log_expr)]
    '-'            [reduce using rule 105 (log_expr)]
    '*'            [reduce using rule 105 (log_expr)]
    '/'            [reduce using rule 105 (log_expr)]
    '^'            [reduce using rule 105 (log_expr)]
    '<'            [reduce using rule 105 (log_expr)]
    '>'            [reduce using rule 105 (log_expr)]
    $default       reduce using rule 105 (log_expr)

    rel_op  go to state 152


state 169

   93 num_expr: expr . '+' expr
   93         | expr '+' expr .
   94         | expr . '-' expr
   95         | expr . '*' expr
   96         | expr . '/' expr
   97         | expr . '^' expr
  100 rel_expr: expr . rel_op expr
  105 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 142
    RELATIONAL_OP  shift, and go to state 143
    EQ_OP          shift, and go to state 144
    '*'            shift, and go to state 147
    '/'            shift, and go to state 148
    '^'            shift, and go to state 149
    '<'            shift, and go to state 150
    '>'            shift, and go to state 151

    LOGICAL_OP     [reduce using rule 93 (num_expr)]
    RELATIONAL_OP  [reduce using rule 93 (num_expr)]
    EQ_OP          [reduce using rule 93 (num_expr)]
    '<'            [reduce using rule 93 (num_expr)]
    '>'            [reduce using rule 93 (num_expr)]
    $default       reduce using rule 93 (num_expr)

    rel_op  go to state 152


state 170

   93 num_expr: expr . '+' expr
   94         | expr . '-' expr
   94         | expr '-' expr .
   95         | expr . '*' expr
   96         | expr . '/' expr
   97         | expr . '^' expr
  100 rel_expr: expr . rel_op expr
  105 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 142
    RELATIONAL_OP  shift, and go to state 143
    EQ_OP          shift, and go to state 144
    '*'            shift, and go to state 147
    '/'            shift, and go to state 148
    '^'            shift, and go to state 149
    '<'            shift, and go to state 150
    '>'            shift, and go to state 151

    LOGICAL_OP     [reduce using rule 94 (num_expr)]
    RELATIONAL_OP  [reduce using rule 94 (num_expr)]
    EQ_OP          [reduce using rule 94 (num_expr)]
    '<'            [reduce using rule 94 (num_expr)]
    '>'            [reduce using rule 94 (num_expr)]
    $default       reduce using rule 94 (num_expr)

    rel_op  go to state 152


state 171

   93 num_expr: expr . '+' expr
   94         | expr . '-' expr
   95         | expr . '*' expr
   95         | expr '*' expr .
   96         | expr . '/' expr
   97         | expr . '^' expr
  100 rel_expr: expr . rel_op expr
  105 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 142
    RELATIONAL_OP  shift, and go to state 143
    EQ_OP          shift, and go to state 144
    '^'            shift, and go to state 149
    '<'            shift, and go to state 150
    '>'            shift, and go to state 151

    LOGICAL_OP     [reduce using rule 95 (num_expr)]
    RELATIONAL_OP  [reduce using rule 95 (num_expr)]
    EQ_OP          [reduce using rule 95 (num_expr)]
    '<'            [reduce using rule 95 (num_expr)]
    '>'            [reduce using rule 95 (num_expr)]
    $default       reduce using rule 95 (num_expr)

    rel_op  go to state 152


state 172

   93 num_expr: expr . '+' expr
   94         | expr . '-' expr
   95         | expr . '*' expr
   96         | expr . '/' expr
   96         | expr '/' expr .
   97         | expr . '^' expr
  100 rel_expr: expr . rel_op expr
  105 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 142
    RELATIONAL_OP  shift, and go to state 143
    EQ_OP          shift, and go to state 144
    '^'            shift, and go to state 149
    '<'            shift, and go to state 150
    '>'            shift, and go to state 151

    LOGICAL_OP     [reduce using rule 96 (num_expr)]
    RELATIONAL_OP  [reduce using rule 96 (num_expr)]
    EQ_OP          [reduce using rule 96 (num_expr)]
    '<'            [reduce using rule 96 (num_expr)]
    '>'            [reduce using rule 96 (num_expr)]
    $default       reduce using rule 96 (num_expr)

    rel_op  go to state 152


state 173

   93 num_expr: expr . '+' expr
   94         | expr . '-' expr
   95         | expr . '*' expr
   96         | expr . '/' expr
   97         | expr . '^' expr
   97         | expr '^' expr .
  100 rel_expr: expr . rel_op expr
  105 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 142
    RELATIONAL_OP  shift, and go to state 143
    EQ_OP          shift, and go to state 144
    '^'            shift, and go to state 149
    '<'            shift, and go to state 150
    '>'            shift, and go to state 151

    LOGICAL_OP     [reduce using rule 97 (num_expr)]
    RELATIONAL_OP  [reduce using rule 97 (num_expr)]
    EQ_OP          [reduce using rule 97 (num_expr)]
    '<'            [reduce using rule 97 (num_expr)]
    '>'            [reduce using rule 97 (num_expr)]
    $default       reduce using rule 97 (num_expr)

    rel_op  go to state 152


state 174

   93 num_expr: expr . '+' expr
   94         | expr . '-' expr
   95         | expr . '*' expr
   96         | expr . '/' expr
   97         | expr . '^' expr
  100 rel_expr: expr . rel_op expr
  100         | expr rel_op expr .
  105 log_expr: expr . LOGICAL_OP expr

    LOGICAL_OP     shift, and go to state 142
    RELATIONAL_OP  shift, and go to state 143
    EQ_OP          shift, and go to state 144
    '+'            shift, and go to state 145
    '-'            shift, and go to state 146
    '*'            shift, and go to state 147
    '/'            shift, and go to state 148
    '^'            shift, and go to state 149
    '<'            shift, and go to state 150
    '>'            shift, and go to state 151

    LOGICAL_OP     [reduce using rule 100 (rel_expr)]
    RELATIONAL_OP  [reduce using rule 100 (rel_expr)]
    EQ_OP          [reduce using rule 100 (rel_expr)]
    '+'            [reduce using rule 100 (rel_expr)]
    '-'            [reduce using rule 100 (rel_expr)]
    '*'            [reduce using rule 100 (rel_expr)]
    '/'            [reduce using rule 100 (rel_expr)]
    '^'            [reduce using rule 100 (rel_expr)]
    '<'            [reduce using rule 100 (rel_expr)]
    '>'            [reduce using rule 100 (rel_expr)]
    $default       reduce using rule 100 (rel_expr)

    rel_op  go to state 152


state 175

   54 things: thing delimiter things .

    $default  reduce using rule 54 (things)


state 176

   65 eq_stmt: $@8 space_eqs EQ_OP space_eqs .

    $default  reduce using rule 65 (eq_stmt)


state 177

   87 control_stmt: $@18 IF SPACE rel_expr THEN NUM_LITERAL . ENDL

    ENDL  shift, and go to state 184


state 178

   89 iterative_stmt: $@19 FOR SPACE assign_stmt SPACE TO . SPACE num_expr SPACE STEP SPACE num_expr ENDL

    SPACE  shift, and go to state 185


state 179

   91 iterative_stmt: $@20 FOR SPACE assign_stmt SPACE TO . SPACE num_expr ENDL

    SPACE  shift, and go to state 186


state 180

   35 values: value COMMA SPACE values .

    $default  reduce using rule 35 (values)


state 181

   45 fun_def_stmt: $@4 DEF SPACE FUN_NAME eq_stmt num_expr ENDL .

    $default  reduce using rule 45 (fun_def_stmt)


state 182

   47 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE var CBRACE . eq_stmt num_expr ENDL

    $default  reduce using rule 64 ($@8)

    eq_stmt  go to state 187
    $@8      go to state 80


state 183

   50 variable_names: variable_names COMMA SPACE var .

    $default  reduce using rule 50 (variable_names)


state 184

   87 control_stmt: $@18 IF SPACE rel_expr THEN NUM_LITERAL ENDL .

    $default  reduce using rule 87 (control_stmt)


state 185

   89 iterative_stmt: $@19 FOR SPACE assign_stmt SPACE TO SPACE . num_expr SPACE STEP SPACE num_expr ENDL

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 108
    var       go to state 121
    num_expr  go to state 188
    rel_expr  go to state 113
    log_expr  go to state 114


state 186

   91 iterative_stmt: $@20 FOR SPACE assign_stmt SPACE TO SPACE . num_expr ENDL

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 108
    var       go to state 121
    num_expr  go to state 189
    rel_expr  go to state 113
    log_expr  go to state 114


state 187

   47 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE var CBRACE eq_stmt . num_expr ENDL

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 108
    var       go to state 121
    num_expr  go to state 190
    rel_expr  go to state 113
    log_expr  go to state 114


state 188

   22 expr: num_expr .
   89 iterative_stmt: $@19 FOR SPACE assign_stmt SPACE TO SPACE num_expr . SPACE STEP SPACE num_expr ENDL

    SPACE  shift, and go to state 191

    $default  reduce using rule 22 (expr)


state 189

   22 expr: num_expr .
   91 iterative_stmt: $@20 FOR SPACE assign_stmt SPACE TO SPACE num_expr . ENDL

    ENDL  shift, and go to state 192

    $default  reduce using rule 22 (expr)


state 190

   22 expr: num_expr .
   47 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE var CBRACE eq_stmt num_expr . ENDL

    ENDL  shift, and go to state 193

    $default  reduce using rule 22 (expr)


state 191

   89 iterative_stmt: $@19 FOR SPACE assign_stmt SPACE TO SPACE num_expr SPACE . STEP SPACE num_expr ENDL

    STEP  shift, and go to state 194


state 192

   91 iterative_stmt: $@20 FOR SPACE assign_stmt SPACE TO SPACE num_expr ENDL .

    $default  reduce using rule 91 (iterative_stmt)


state 193

   47 fun_def_stmt: $@5 DEF SPACE FUN_NAME OBRACE var CBRACE eq_stmt num_expr ENDL .

    $default  reduce using rule 47 (fun_def_stmt)


state 194

   89 iterative_stmt: $@19 FOR SPACE assign_stmt SPACE TO SPACE num_expr SPACE STEP . SPACE num_expr ENDL

    SPACE  shift, and go to state 195


state 195

   89 iterative_stmt: $@19 FOR SPACE assign_stmt SPACE TO SPACE num_expr SPACE STEP SPACE . num_expr ENDL

    STR_LITERAL    shift, and go to state 118
    NUM_LITERAL    shift, and go to state 119
    FLOAT_LITERAL  shift, and go to state 120
    DIM_VAR        shift, and go to state 55
    OBRACE         shift, and go to state 106
    VAR_NAME       shift, and go to state 56
    '-'            shift, and go to state 107

    expr      go to state 108
    var       go to state 121
    num_expr  go to state 196
    rel_expr  go to state 113
    log_expr  go to state 114


state 196

   22 expr: num_expr .
   89 iterative_stmt: $@19 FOR SPACE assign_stmt SPACE TO SPACE num_expr SPACE STEP SPACE num_expr . ENDL

    ENDL  shift, and go to state 197

    $default  reduce using rule 22 (expr)


state 197

   89 iterative_stmt: $@19 FOR SPACE assign_stmt SPACE TO SPACE num_expr SPACE STEP SPACE num_expr ENDL .

    $default  reduce using rule 89 (iterative_stmt)
